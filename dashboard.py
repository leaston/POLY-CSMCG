# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'dashboard.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import re
import sqlite3

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QRegExp, QTimer, Qt, QDateTime
from PyQt5.QtGui import QRegExpValidator, QColor, QIcon
from PyQt5.QtWidgets import QTableWidgetItem, QLabel, QMessageBox, QWidget, QLineEdit, QRadioButton, QHBoxLayout, \
    QPushButton, QTabWidget, QDialog, QTableWidget, QHeaderView, QVBoxLayout, QTextEdit, QSpinBox, QComboBox, \
    QDateTimeEdit, QCheckBox
from PyQt5.QtCore import QObject, QEvent, Qt
from PyQt5.QtGui import QRegExpValidator
from PyQt5.QtWidgets import QMessageBox

precedent = 0
suivant = 2


def capitalize_sentences(text_edit):
    """Capitalize the first letter of each sentence in a QTextEdit."""
    cursor = text_edit.textCursor()
    pos = cursor.position()

    # Get the current text
    text = text_edit.toPlainText()

    # Capitalize the first letter of each sentence
    capitalized_text = re.sub(r'([.!?]\s*|^)([a-z])', lambda m: m.group(1) + m.group(2).upper(), text)

    # Update the QTextEdit content only if there is a change
    if text != capitalized_text:
        text_edit.blockSignals(True)  # Block signals to avoid recursion
        text_edit.setPlainText(capitalized_text)
        text_edit.blockSignals(False)  # Unblock signals

        # Restore the cursor position
        cursor.setPosition(pos)
        text_edit.setTextCursor(cursor)


def capitalize_lineedit(line_edit):
    """Capitalize each word in a QLineEdit."""
    text = line_edit.text()
    if text and not text.endswith(' '):  # Ne pas capitaliser si l'espace est à la fin du texte
        capitalized_text = ' '.join([word.capitalize() for word in text.split()])
        line_edit.setText(capitalized_text)


class CustomValidatorHandler(QObject):
    """Classe pour gérer les événements clavier et afficher des messages d'erreur en cas de saisie incorrecte."""

    def __init__(self, parent=None):
        super().__init__(parent)

    def eventFilter(self, obj, event):
        """Intercepte les événements clavier pour afficher des messages d'erreur."""
        if event.type() == QEvent.KeyPress:
            key = event.text()

            # Exemple pour `name_ledit` et `profession_ledit`
            if obj.objectName() in ["name_ledit", "profession_ledit"]:
                if key.isdigit():  # Si l'utilisateur entre un chiffre
                    msg = QMessageBox(obj)
                    msg.setWindowTitle("Entrée non valide")
                    msg.setText("Vous ne pouvez entrer un chiffre.")
                    msg.setStyleSheet(
                        """
                        QMessageBox {
                            background-color: rgb(186, 209, 248);
                            color: rgb(0, 1, 146);
                            font-size: 12px;
                            font-weight: normal;
                        }
                        QMessageBox QLabel {
                            color: rgb(0, 1, 146);
                        }
                        QMessageBox QPushButton {
                            background-color: rgb(0, 1, 146);
                            color: white;
                            border-radius: 5px;
                            padding: 5px;
                        }
                        QMessageBox QPushButton:hover {
                            background-color: rgb(0, 0, 100);
                        }
                        """
                    )
                    msg.exec_()
                    return True  # Empêche l'événement d'être traité

            # Exemple pour `phone_ledit`
            if obj.objectName() == "phone_ledit":
                if not (key.isdigit() or key == "+"):  # Si l'utilisateur entre une lettre ou un caractère spécial
                    msg = QMessageBox(obj)
                    msg.setWindowTitle("Entrée non valide")
                    msg.setText("Vous ne pouvez entrer que des chiffres et le signe +.")
                    msg.setStyleSheet(
                        """
                        QMessageBox {
                            background-color: rgb(186, 209, 248);
                            color: rgb(0, 1, 146);
                            font-size: 12px;
                            font-weight: normal;
                        }
                        QMessageBox QLabel {
                            color: rgb(0, 1, 146);
                        }
                        QMessageBox QPushButton {
                            background-color: rgb(0, 1, 146);
                            color: white;
                            border-radius: 5px;
                            padding: 5px;
                        }
                        QMessageBox QPushButton:hover {
                            background-color: rgb(0, 0, 100);
                        }
                        """
                    )
                    msg.exec_()
                    return True  # Empêche l'événement d'être traité

            # Exemple pour `temp_ledit` et les champs numériques
            if obj.objectName() in ["temp_ledit", "tabg_ledit", "tabd_ledit", "bg_ledit", "weight_ledit"]:
                if not (key.isdigit() or key == "."):  # Si l'utilisateur entre une lettre ou un caractère spécial
                    msg = QMessageBox(obj)
                    msg.setWindowTitle("Entrée non valide")
                    msg.setText("Vous ne pouvez entrer que des chiffres et le point (.).")
                    msg.setStyleSheet(
                        """
                        QMessageBox {
                            background-color: rgb(186, 209, 248);
                            color: rgb(0, 1, 146);
                            font-size: 12px;
                            font-weight: normal;
                        }
                        QMessageBox QLabel {
                            color: rgb(0, 1, 146);
                        }
                        QMessageBox QPushButton {
                            background-color: rgb(0, 1, 146);
                            color: white;
                            border-radius: 5px;
                            padding: 5px;
                        }
                        QMessageBox QPushButton:hover {
                            background-color: rgb(0, 0, 100);
                        }
                        """
                    )
                    msg.exec_()
                    return True  # Empêche l'événement d'être traité

        return super().eventFilter(obj, event)


class Ui_dashboard_window(object):
    def __init__(self):
        self.search_results = None

    def setupUi(self, dashboard_window):

        self.centralwidget = QtWidgets.QWidget(dashboard_window)

        # Bouton pour afficher la fenêtre de tableau de bord
        QtCore.QMetaObject.connectSlotsByName(dashboard_window)

        dashboard_window.setObjectName("dashboard_window")
        dashboard_window.resize(1270, 730)

        self.centralwidget.setObjectName("centralwidget")

        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("img/cg_icon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        dashboard_window.setWindowIcon(icon)
        dashboard_window.setStyleSheet(
            "*{\n"
            "    font-family: Century Gothic;\n"
            "}\n"
            "\n"
            "QGroupBox{\n"
            "    background-color:#333;\n"
            "    color: #fff;\n"
            "    border-radius: 5px;\n"
            "    border: 1px solid gray;\n"
            "    font: 14pt \"Montserrat\";\n"
            "}\n"
            "\n"
            "/*QLabel{\n"
            "    color: white;\n"
            "}*/\n"
            "\n"
            "QToolButton{\n"
            "    border-radius: 40px;\n"
            "    background-color:orange;\n"
            "    border: 5px solid #333;\n"
            "}\n"
            "\n"
            "/*** QLineEdit ***/\n"
            "QLineEdit{\n"
            "    font: 10pt \"Montserrat\";\n"
            "    color: rgb(0, 1, 146);\n"
            "    padding: 10px;\n"
            "/*    background-color: rgb(186, 209, 248);*/\n"
            "}\n"
            "\n"
            "\n"
            "/**** QSpinBox ****/\n"
            "QSpinBox {\n"
            "    background-color: rgb(186, 209, 248); /* Couleur d\'arrière-plan */\n"
            "    color: rgb(0, 1, 146);                /* Couleur du texte */\n"
            "    border: 1px outset gray;     /* Bordure */\n"
            "    box-shadow: outset 5px 5px 10px gray;\n"
            "    border-radius: 1px;                   /* Coins arrondis */\n"
            "    padding: 10px;                         /* Espacement interne */\n"
            "    border-bottom: 1px outset gray;\n"
            "}\n"
            "\n"
            "QSpinBox::up-button, QSpinBox::down-button {\n"
            "/*background-color: transparent;        /* Rendre les boutons transparents "
            "pour voir la couleur de fond */\n"
            "border: none;                         /* Supprime les bordures des boutons */\n"
            "    width: 20px;                          /* Largeur des boutons */\n"
            "}\n"
            "\n"
            "QSpinBox::up-arrow, QSpinBox::down-arrow {\n"
            "    width: 10px;                          /* Taille des flèches */\n"
            "    height: 10px;\n"
            "background: rgb(0, 1, 146);                     /* Supprime les fonds des "
            "flèches */\n"
            "    color: white;                /* Couleur des flèches */\n"
            "}\n"
            "\n"
            "QSpinBox:focus {\n"
            "border: 1px solid rgb(65, 173, 255);   /* Bordure différente en cas de focus "
            "*/\n"
            "}\n"
            "\n"
            "/******************************/\n"
            "\n"
            "\n"
            "\n"
            "QRadioButton{\n"
            "    color: rgb(51, 51, 51);\n"
            "    font-size: 14px;\n"
            "}\n"
            "\n"
            "\n"
            "/**** QComboBox ****/\n"
            "QComboBox {\n"
            "    font: 10pt \"Montserrat\";\n"
            "    /*background-color: rgb(186, 209, 248);*/\n"
            "    color: rgb(0, 1, 146);\n"
            "    padding: 10px;\n"
            "    /*box-shadow: none;\n"
            "    border: none;*/\n"
            "}\n"
            "\n"
            "QComboBox::drop-down {\n"
            "    border: none; /* Supprime la bordure du bouton de la flèche */\n"
            "    subcontrol-origin: padding;\n"
            "    subcontrol-position: top right;\n"
            "}\n"
            "\n"
            "QComboBox QAbstractItemView {\n"
            "background-color: rgb(186, 209, 248); /* Couleur de fond du menu déroulant */\n"
            "    color: rgb(0, 1, 146);               /* Couleur du texte */\n"
            "/* border: 1px solid rgb(150, 150, 150); /* Bordure pour alignement avec le "
            "parent */\n"
            "    font: 10pt \"Montserrat\";\n"
            "   /* margin: 0 20px;                         /* Supprime les débordements */\n"
            "    padding: 0 10px;\n"
            "    outline: none;                    /* Supprime l\'effet de focus */\n"
            "    border: none; \n"
            "    box-shadow: none;\n"
            "}\n"
            "\n"
            "QComboBox QAbstractItemView::item {\n"
            "padding: 10px;                       /* Ajoute un espacement entre les "
            "éléments */\n"
            "}\n"
            "\n"
            "QComboBox QAbstractItemView::item:selected {\n"
            "background-color: rgb(150, 180, 220); /* Couleur pour l\'élément sélectionné "
            "*/\n"
            "color: white;                        /* Couleur du texte pour l\'élément "
            "sélectionné */\n"
            "}")
        dashboard_window.setIconSize(QtCore.QSize(16, 16))

        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(211, 0, 101, 91))
        self.label.setStyleSheet("")
        self.label.setText("")
        self.label.setPixmap(QtGui.QPixmap("img/cg_icon_pt.png"))
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.header_lbl_2 = QtWidgets.QLabel(self.centralwidget)
        self.header_lbl_2.setGeometry(QtCore.QRect(350, 0, 701, 91))
        self.header_lbl_2.setStyleSheet("font: 81 22pt \"Montserrat ExtraBold\";\n"
                                        "color: rgb(0, 1, 146);\n"
                                        "")
        self.header_lbl_2.setAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.header_lbl_2.setObjectName("header_lbl_2")
        self.line_5 = QtWidgets.QFrame(self.centralwidget)
        self.line_5.setGeometry(QtCore.QRect(0, 90, 1271, 20))
        self.line_5.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_5.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_5.setObjectName("line_5")

        self.line_8 = QtWidgets.QFrame(self.centralwidget)
        self.line_8.setGeometry(QtCore.QRect(-2, 88, 1271, 20))
        self.line_8.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_8.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_8.setObjectName("line_8")

        self.horizontalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(17, 105, 1231, 51))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.user_auth_lbl = QtWidgets.QLabel(self.horizontalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.user_auth_lbl.sizePolicy().hasHeightForWidth())
        self.user_auth_lbl.setSizePolicy(sizePolicy)
        self.user_auth_lbl.setStyleSheet("background-color: rgb(0, 1, 146);\n"
                                         "color: rgb(186, 209, 248);\n"
                                         "padding-left: 10px;\n"
                                         "font-size: 16px;")
        self.user_auth_lbl.setObjectName("user_auth_lbl")
        self.horizontalLayout.addWidget(self.user_auth_lbl)
        self.name_user_auth_lbl = QtWidgets.QLabel(self.horizontalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.name_user_auth_lbl.sizePolicy().hasHeightForWidth())
        self.name_user_auth_lbl.setSizePolicy(sizePolicy)
        self.name_user_auth_lbl.setStyleSheet("font-size: 16px;\n"
                                              "color: rgba(255, 0, 0, 175);\n"
                                              "/*color: rgb(51, 51, 51);*/\n"
                                              "")
        self.name_user_auth_lbl.setText("")
        self.name_user_auth_lbl.setObjectName("name_user_auth_lbl")
        self.horizontalLayout.addWidget(self.name_user_auth_lbl)
        self.date_heure = QtWidgets.QDateTimeEdit(self.horizontalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.date_heure.sizePolicy().hasHeightForWidth())
        self.date_heure.setSizePolicy(sizePolicy)
        self.date_heure.setMinimumSize(QtCore.QSize(0, 0))
        self.date_heure.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.date_heure.setBaseSize(QtCore.QSize(0, 0))
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        self.date_heure.setFont(font)
        self.date_heure.setAutoFillBackground(False)
        self.date_heure.setStyleSheet("color: rgb(0, 1, 146);\n"
                                      "border-radius: 5px;")
        self.date_heure.setLocale(QtCore.QLocale(QtCore.QLocale.French, QtCore.QLocale.BurkinaFaso))
        self.date_heure.setInputMethodHints(QtCore.Qt.ImhPreferNumbers)
        self.date_heure.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.date_heure.setReadOnly(False)
        self.date_heure.setDate(QtCore.QDate(2023, 1, 1))
        self.date_heure.setCalendarPopup(True)
        self.date_heure.setObjectName("date_heure")
        self.horizontalLayout.addWidget(self.date_heure)
        self.line_4 = QtWidgets.QFrame(self.centralwidget)
        self.line_4.setGeometry(QtCore.QRect(0, 153, 1271, 20))
        self.line_4.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_4.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_4.setObjectName("line_4")
        self.tw_identity = QtWidgets.QTabWidget(self.centralwidget)
        self.tw_identity.setGeometry(QtCore.QRect(9, 180, 1249, 481))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.tw_identity.sizePolicy().hasHeightForWidth())
        self.tw_identity.setSizePolicy(sizePolicy)
        self.tw_identity.setStyleSheet("color: rgb(0, 1, 146);")
        self.tw_identity.setTabShape(QtWidgets.QTabWidget.Triangular)
        self.tw_identity.setUsesScrollButtons(True)
        self.tw_identity.setDocumentMode(True)
        self.tw_identity.setObjectName("tw_identity")
        self.patient_tab = QtWidgets.QWidget()
        self.patient_tab.setObjectName("patient_tab")
        self.restitute_tbl = QtWidgets.QTableWidget(self.patient_tab)
        self.restitute_tbl.setGeometry(QtCore.QRect(10, 60, 1231, 281))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.restitute_tbl.sizePolicy().hasHeightForWidth())
        self.restitute_tbl.setSizePolicy(sizePolicy)
        self.restitute_tbl.setStyleSheet("border-color: rgb(131, 171, 240);")
        self.restitute_tbl.setAutoScrollMargin(12)
        self.restitute_tbl.setColumnCount(18)
        self.restitute_tbl.setObjectName("restitute_tbl")
        self.restitute_tbl.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.restitute_tbl.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.restitute_tbl.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.restitute_tbl.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.restitute_tbl.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.restitute_tbl.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.restitute_tbl.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.restitute_tbl.setHorizontalHeaderItem(6, item)
        item = QtWidgets.QTableWidgetItem()
        self.restitute_tbl.setHorizontalHeaderItem(7, item)
        item = QtWidgets.QTableWidgetItem()
        self.restitute_tbl.setHorizontalHeaderItem(8, item)
        item = QtWidgets.QTableWidgetItem()
        self.restitute_tbl.setHorizontalHeaderItem(9, item)
        item = QtWidgets.QTableWidgetItem()
        self.restitute_tbl.setHorizontalHeaderItem(10, item)
        item = QtWidgets.QTableWidgetItem()
        self.restitute_tbl.setHorizontalHeaderItem(11, item)
        item = QtWidgets.QTableWidgetItem()
        self.restitute_tbl.setHorizontalHeaderItem(12, item)
        item = QtWidgets.QTableWidgetItem()
        self.restitute_tbl.setHorizontalHeaderItem(13, item)
        item = QtWidgets.QTableWidgetItem()
        self.restitute_tbl.setHorizontalHeaderItem(14, item)
        item = QtWidgets.QTableWidgetItem()
        self.restitute_tbl.setHorizontalHeaderItem(15, item)
        item = QtWidgets.QTableWidgetItem()
        self.restitute_tbl.setHorizontalHeaderItem(16, item)
        item = QtWidgets.QTableWidgetItem()
        self.restitute_tbl.setHorizontalHeaderItem(17, item)
        self.restitute_tbl.horizontalHeader().setCascadingSectionResizes(True)
        self.restitute_tbl.verticalHeader().setCascadingSectionResizes(True)
        self.restitute_tbl.verticalHeader().setDefaultSectionSize(30)
        self.refresh_btn = QtWidgets.QPushButton(self.patient_tab)
        self.refresh_btn.setGeometry(QtCore.QRect(1040, 360, 191, 41))
        self.refresh_btn.setStyleSheet(
            "QPushButton{\n"
            "    background-color:  rgb(25, 135, 84);\n"
            "    border-radius: 3px;\n"
            "    color: white;\n"
            "    border: 1px inset gray;\n"
            "    font: 16pt \"Century Gothic\";\n"
            "}\n"
            "\n"
            "QPushButton:hover{\n"
            "    background-color: #adc4ad;\n"
            "border-radius: 3px;\n"
            "    border: 1px inset gray;\n"
            "    color: black;\n"
            "    font: 16pt \"Century Gothic\";\n"
            "}")
        self.refresh_btn.setObjectName("refresh_btn")

        self.manage_users_btn = QtWidgets.QPushButton(self.patient_tab)
        self.manage_users_btn.setGeometry(QtCore.QRect(10, 360, 311, 41))
        self.manage_users_btn.setStyleSheet(
            "QPushButton{\n"
            "    background-color:  rgb(13,110,253);\n"
            "    border-radius: 3px;\n"
            "    color: white;\n"
            "    border: 1px inset gray;\n"
            "    font: 16pt \"Century Gothic\";\n"
            "}\n"
            "\n"
            "QPushButton:hover{\n"
            "    background-color: rgb(13,202,240);\n"
            "border-radius: 3px;\n"
            "    border: 1px inset gray;\n"
            "    color: black;\n"
            "    font: 16pt \"Century Gothic\";\n"
            "}")
        self.manage_users_btn.setObjectName("manage_users_btn")
        self.manage_users_btn.setVisible(False)  # Par défaut, caché

        self.horizontalLayoutWidget_3 = QtWidgets.QWidget(self.patient_tab)
        self.horizontalLayoutWidget_3.setGeometry(QtCore.QRect(11, 10, 1231, 51))
        self.horizontalLayoutWidget_3.setObjectName("horizontalLayoutWidget_3")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_3)
        self.horizontalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.search_lbl = QtWidgets.QLabel(self.horizontalLayoutWidget_3)
        self.search_lbl.setStyleSheet("font: 10pt \"Century Gothic\";\n"
                                      "color: rgba(51, 51, 51);")
        self.search_lbl.setObjectName("search_lbl")
        self.horizontalLayout_3.addWidget(self.search_lbl)
        self.search_lineEdit = QtWidgets.QLineEdit(self.horizontalLayoutWidget_3)
        self.search_lineEdit.setStyleSheet("color: rgb(255, 255, 255);\n"
                                           "background-color: rgb(131, 171, 240);\n"
                                           "")
        self.search_lineEdit.setObjectName("search_lineEdit")
        self.horizontalLayout_3.addWidget(self.search_lineEdit)
        self.search_btn = QtWidgets.QPushButton(self.horizontalLayoutWidget_3)
        self.search_btn.setStyleSheet("width: 150px;\n"
                                      "height: 36px;")
        self.search_btn.setObjectName("search_btn")
        self.horizontalLayout_3.addWidget(self.search_btn)
        self.tw_identity.addTab(self.patient_tab, "")
        self.tasaisie_identite_tab = QtWidgets.QWidget()
        self.tasaisie_identite_tab.setObjectName("tasaisie_identite_tab")
        self.id_lbl = QtWidgets.QLabel(self.tasaisie_identite_tab)
        self.id_lbl.setGeometry(QtCore.QRect(11, 4, 34, 40))
        self.id_lbl.setStyleSheet("font: 12pt \"Century Gothic\";\n"
                                  "font-weight: bold;\n"
                                  "color: rgb(51, 51, 51);\n"
                                  "padding-left: 10px;")
        self.id_lbl.setObjectName("id_lbl")
        self.gridLayoutWidget_2 = QtWidgets.QWidget(self.tasaisie_identite_tab)
        self.gridLayoutWidget_2.setGeometry(QtCore.QRect(10, 50, 1221, 271))
        self.gridLayoutWidget_2.setObjectName("gridLayoutWidget_2")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.gridLayoutWidget_2)
        self.gridLayout_2.setContentsMargins(0, 0, 15, 0)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.phone_lbl = QtWidgets.QLabel(self.gridLayoutWidget_2)
        self.phone_lbl.setStyleSheet("font: 12pt \"Century Gothic\";\n"
                                     "color: rgb(51, 51, 51);\n"
                                     "padding-left: 10px;\n"
                                     "margin-left: 20px;")
        self.phone_lbl.setObjectName("phone_lbl")
        self.gridLayout_2.addWidget(self.phone_lbl, 2, 5, 1, 1)
        self.sector_lbl = QtWidgets.QLabel(self.gridLayoutWidget_2)
        self.sector_lbl.setStyleSheet("font: 12pt \"Century Gothic\";\n"
                                      "color: rgb(51, 51, 51);\n"
                                      "padding-left: 10px;\n"
                                      "margin-left: 20px;")
        self.sector_lbl.setObjectName("sector_lbl")
        self.gridLayout_2.addWidget(self.sector_lbl, 1, 5, 1, 1)
        self.profession_lbl = QtWidgets.QLabel(self.gridLayoutWidget_2)
        self.profession_lbl.setStyleSheet("font: 12pt \"Century Gothic\";\n"
                                          "color: rgb(51, 51, 51);\n"
                                          "padding-left: 10px;")
        self.profession_lbl.setObjectName("profession_lbl")
        self.gridLayout_2.addWidget(self.profession_lbl, 1, 0, 1, 1)
        self.commune_lbl = QtWidgets.QLabel(self.gridLayoutWidget_2)
        self.commune_lbl.setStyleSheet("font: 12pt \"Century Gothic\";\n"
                                       "color: rgb(51, 51, 51);\n"
                                       "padding-left: 10px;\n"
                                       "margin-left: 20px;")
        self.commune_lbl.setObjectName("commune_lbl")
        self.gridLayout_2.addWidget(self.commune_lbl, 0, 5, 1, 1)
        self.name_ledit = QtWidgets.QLineEdit(self.gridLayoutWidget_2)
        self.name_ledit.setObjectName("name_ledit")
        self.gridLayout_2.addWidget(self.name_ledit, 0, 1, 1, 1)
        self.commune_ledit = QtWidgets.QLineEdit(self.gridLayoutWidget_2)
        self.commune_ledit.setObjectName("commune_ledit")
        self.gridLayout_2.addWidget(self.commune_ledit, 0, 6, 1, 1)
        self.profession_ledit = QtWidgets.QLineEdit(self.gridLayoutWidget_2)
        self.profession_ledit.setObjectName("profession_ledit")
        self.gridLayout_2.addWidget(self.profession_ledit, 1, 1, 1, 1)
        self.sector_spinBox = QtWidgets.QSpinBox(self.gridLayoutWidget_2)
        self.sector_spinBox.setObjectName("sector_spinBox")
        self.gridLayout_2.addWidget(self.sector_spinBox, 1, 6, 1, 1)
        self.age_lbl = QtWidgets.QLabel(self.gridLayoutWidget_2)
        self.age_lbl.setStyleSheet("font: 12pt \"Century Gothic\";\n"
                                   "color: rgb(51, 51, 51);\n"
                                   "padding-left: 10px;")
        self.age_lbl.setObjectName("age_lbl")
        self.gridLayout_2.addWidget(self.age_lbl, 2, 0, 1, 1)
        self.woman_rbtn = QtWidgets.QRadioButton(self.gridLayoutWidget_2)
        self.woman_rbtn.setCheckable(True)
        self.woman_rbtn.setChecked(False)
        self.woman_rbtn.setObjectName("woman_rbtn")
        self.gridLayout_2.addWidget(self.woman_rbtn, 4, 1, 1, 1)
        self.gender_lbl = QtWidgets.QLabel(self.gridLayoutWidget_2)
        self.gender_lbl.setStyleSheet("font: 12pt \"Century Gothic\";\n"
                                      "color: rgb(51, 51, 51);\n"
                                      "padding-left: 10px;")
        self.gender_lbl.setObjectName("gender_lbl")
        self.gridLayout_2.addWidget(self.gender_lbl, 4, 0, 1, 1)
        self.zone_comboBox = QtWidgets.QComboBox(self.gridLayoutWidget_2)
        self.zone_comboBox.setStyleSheet("\n"
                                         "    background-color: rgb(186, 209, 248);")
        self.zone_comboBox.setModelColumn(0)
        self.zone_comboBox.setObjectName("zone_comboBox")
        self.zone_comboBox.addItem("")
        self.zone_comboBox.addItem("")
        self.zone_comboBox.addItem("")
        self.zone_comboBox.addItem("")
        self.gridLayout_2.addWidget(self.zone_comboBox, 4, 6, 1, 1)
        self.zone_lbl = QtWidgets.QLabel(self.gridLayoutWidget_2)
        self.zone_lbl.setStyleSheet("font: 12pt \"Century Gothic\";\n"
                                    "color: rgb(51, 51, 51);\n"
                                    "padding-left: 10px;\n"
                                    "margin-left: 20px;")
        self.zone_lbl.setObjectName("zone_lbl")
        self.gridLayout_2.addWidget(self.zone_lbl, 4, 5, 1, 1)
        self.phone_ledit = QtWidgets.QLineEdit(self.gridLayoutWidget_2)
        self.phone_ledit.setObjectName("phone_ledit")
        self.gridLayout_2.addWidget(self.phone_ledit, 2, 6, 1, 1)
        self.name_lbl = QtWidgets.QLabel(self.gridLayoutWidget_2)
        self.name_lbl.setStyleSheet("font: 12pt \"Century Gothic\";\n"
                                    "color: rgb(51, 51, 51);\n"
                                    "padding-left: 10px;")
        self.name_lbl.setObjectName("name_lbl")
        self.gridLayout_2.addWidget(self.name_lbl, 0, 0, 1, 1)
        self.age_spinBox = QtWidgets.QSpinBox(self.gridLayoutWidget_2)
        self.age_spinBox.setStyleSheet("")
        self.age_spinBox.setObjectName("age_spinBox")
        self.gridLayout_2.addWidget(self.age_spinBox, 2, 1, 1, 1)
        self.man_rbtn = QtWidgets.QRadioButton(self.gridLayoutWidget_2)
        self.man_rbtn.setObjectName("man_rbtn")
        self.gridLayout_2.addWidget(self.man_rbtn, 5, 1, 1, 1)
        self.record_id = QtWidgets.QLabel(self.gridLayoutWidget_2)
        self.record_id.setStyleSheet(
            "/*background-color: rgb(0, 1, 146);\n"
            "color: rgb(186, 209, 248);\n"
            "font: 75 16pt \"Century Gothic\";\n"
            "padding-left:5px;*/\n"
            "color: transparent;\n"
            "")
        self.record_id.setAlignment(QtCore.Qt.AlignCenter)
        self.record_id.setObjectName("record_id")
        self.gridLayout_2.addWidget(self.record_id, 5, 5, 1, 1)
        self.lbl_date_heure = QtWidgets.QLabel(self.gridLayoutWidget_2)
        self.lbl_date_heure.setStyleSheet("border: 1px solid transparent;\n"
                                          "")
        self.lbl_date_heure.setText("")
        self.lbl_date_heure.setObjectName("lbl_date_heure")
        self.gridLayout_2.addWidget(self.lbl_date_heure, 5, 6, 1, 1)
        self.first_btn = QtWidgets.QPushButton(self.tasaisie_identite_tab)
        self.first_btn.setGeometry(QtCore.QRect(10, 359, 51, 31))
        self.first_btn.setStyleSheet(
            "QPushButton{\n"
            "    background-color: rgb(0, 1, 146);\n"
            "    border-radius: 3px;\n"
            "    color: rgb(186, 209, 24);\n"
            "    border: 1px outset gray;\n"
            "    font: 12pt \"Century Gothic\";\n"
            "}\n"
            "\n"
            "QPushButton:hover{\n"
            "    color: orange;\n"
            "    border-radius: 3px;\n"
            "    border: 1px outset gray;\n"
            "    font: 12pt \"Century Gothic\";\n"
            "}\n"
            "\n"
            "")
        self.first_btn.setObjectName("first_btn")
        self.previous_btn = QtWidgets.QPushButton(self.tasaisie_identite_tab)
        self.previous_btn.setGeometry(QtCore.QRect(62, 359, 51, 31))
        self.previous_btn.setStyleSheet(
            "QPushButton{\n"
            "    background-color: rgb(0, 1, 146);\n"
            "    border-radius: 3px;\n"
            "    color: rgb(186, 209, 24);\n"
            "    border: 1px outset gray;\n"
            "    font: 12pt \"Century Gothic\";\n"
            "}\n"
            "\n"
            "QPushButton:hover{\n"
            "    color: orange;\n"
            "    border-radius: 3px;\n"
            "    border: 1px outset gray;\n"
            "    font: 12pt \"Century Gothic\";\n"
            "}\n"
            "")
        self.previous_btn.setObjectName("previous_btn")
        self.last_btn = QtWidgets.QPushButton(self.tasaisie_identite_tab)
        self.last_btn.setGeometry(QtCore.QRect(182, 360, 51, 31))
        self.last_btn.setStyleSheet(
            "QPushButton{\n"
            "    background-color: rgb(0, 1, 146);\n"
            "    border-radius: 3px;\n"
            "    color: rgb(186, 209, 24);\n"
            "    border: 1px outset gray;\n"
            "    font: 12pt \"Century Gothic\";\n"
            "}\n"
            "\n"
            "QPushButton:hover{\n"
            "    color: orange;\n"
            "    border-radius: 3px;\n"
            "    border: 1px outset gray;\n"
            "    font: 12pt \"Century Gothic\";\n"
            "}\n"
            "")
        self.last_btn.setObjectName("last_btn")
        self.next_btn = QtWidgets.QPushButton(self.tasaisie_identite_tab)
        self.next_btn.setGeometry(QtCore.QRect(130, 360, 51, 31))
        self.next_btn.setStyleSheet(
            "QPushButton{\n"
            "    background-color: rgb(0, 1, 146);\n"
            "    border-radius: 3px;\n"
            "    color: rgb(186, 209, 24);\n"
            "    border: 1px outset gray;\n"
            "    font: 12pt \"Century Gothic\";\n"
            "}\n"
            "\n"
            "QPushButton:hover{\n"
            "    color: orange;\n"
            "    border-radius: 3px;\n"
            "    border: 1px outset gray;\n"
            "    font: 12pt \"Century Gothic\";\n"
            "}\n"
            "")
        self.next_btn.setObjectName("next_btn")
        self.add_btn = QtWidgets.QPushButton(self.tasaisie_identite_tab)
        self.add_btn.setGeometry(QtCore.QRect(639, 360, 191, 41))
        self.add_btn.setStyleSheet(
            "QPushButton{\n"
            "    background-color:  rgb(25,135,84);\n"
            "    border-radius: 3px;\n"
            "    color: white;\n"
            "    border: 1px inset gray;\n"
            "    font: 16pt \"Century Gothic\";\n"
            "}\n"
            "\n"
            "QPushButton:hover{\n"
            "    background-color: #adc4ad;\n"
            "    border-radius: 3px;\n"
            "    border: 1px inset gray;\n"
            "    color: black;\n"
            "    font: 16pt \"Century Gothic\";\n"
            "}")
        self.add_btn.setObjectName("add_btn")
        self.edit_btn = QtWidgets.QPushButton(self.tasaisie_identite_tab)
        self.edit_btn.setGeometry(QtCore.QRect(839, 360, 191, 41))
        self.edit_btn.setStyleSheet("QPushButton{\n"
                                    "    background-color: rgb(13,110,253);\n"
                                    "    border-radius: 3px;\n"
                                    "    color: white;\n"
                                    "    border: 1px inset gray;\n"
                                    "    font: 16pt \"Century Gothic\";\n"
                                    "}\n"
                                    "\n"
                                    "QPushButton:hover{\n"
                                    "    background-color: rgb(13,202,240);\n"
                                    "    border-radius: 3px;\n"
                                    "    border: 1px inset gray;\n"
                                    "    color: black;\n"
                                    "    font: 16pt \"Century Gothic\";\n"
                                    "}")
        self.edit_btn.setObjectName("edit_btn")
        self.del_btn = QtWidgets.QPushButton(self.tasaisie_identite_tab)
        self.del_btn.setGeometry(QtCore.QRect(1039, 360, 191, 41))
        self.del_btn.setStyleSheet("QPushButton{\n"
                                   "    background-color:  orange;\n"
                                   "    border-radius: 3px;\n"
                                   "    color: white;\n"
                                   "    border: 1px inset gray;\n"
                                   "    font: 16pt \"Century Gothic\";\n"
                                   "}\n"
                                   "\n"
                                   "QPushButton:hover{\n"
                                   "    background-color: rgb(255, 193, 7);\n"
                                   "    border-radius: 3px;\n"
                                   "    border: 1px inset gray;\n"
                                   "    color: black;\n"
                                   "    font: 16pt \"Century Gothic\";\n"
                                   "}")
        self.del_btn.setObjectName("del_btn")
        self.line = QtWidgets.QFrame(self.tasaisie_identite_tab)
        self.line.setGeometry(QtCore.QRect(-20, 345, 1291, 20))
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.Recherche = QtWidgets.QLabel(self.tasaisie_identite_tab)
        self.Recherche.setGeometry(QtCore.QRect(130, 4, 286, 40))
        self.Recherche.setStyleSheet("font: 10pt \"Century Gothic\";\n"
                                     "color: rgb(51, 51, 51);")
        self.Recherche.setObjectName("Recherche")
        self.search_lineEdit_2 = QtWidgets.QLineEdit(self.tasaisie_identite_tab)
        self.search_lineEdit_2.setEnabled(True)
        self.search_lineEdit_2.setGeometry(QtCore.QRect(418, 4, 540, 40))
        self.search_lineEdit_2.setStyleSheet("color: rgb(255, 255, 255);\n"
                                             "background-color: rgb(131, 171, 240);\n"
                                             "")
        self.search_lineEdit_2.setObjectName("search_lineEdit_2")
        self.search_btn_2 = QtWidgets.QPushButton(self.tasaisie_identite_tab)
        self.search_btn_2.setEnabled(True)
        self.search_btn_2.setGeometry(QtCore.QRect(974, 4, 120, 40))
        self.search_btn_2.setObjectName("search_btn_2")
        self.erase_all_widgets_btn = QtWidgets.QPushButton(self.tasaisie_identite_tab)
        self.erase_all_widgets_btn.setGeometry(QtCore.QRect(1109, 4, 120, 40))
        self.erase_all_widgets_btn.setObjectName("erase_all_widgets_btn")
        self.line_3 = QtWidgets.QFrame(self.tasaisie_identite_tab)
        self.line_3.setGeometry(QtCore.QRect(-14, 310, 1281, 20))
        self.line_3.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_3.setObjectName("line_3")
        self.id_content_lbl = QtWidgets.QLabel(self.tasaisie_identite_tab)
        self.id_content_lbl.setGeometry(QtCore.QRect(240, 360, 131, 31))
        self.id_content_lbl.setStyleSheet("border: 1px solid transparent;\n"
                                          "color: transparent;")
        self.id_content_lbl.setText("")
        self.id_content_lbl.setObjectName("id_content_lbl")
        self.label_ID_Enr = QtWidgets.QLabel(self.tasaisie_identite_tab)
        self.label_ID_Enr.setGeometry(QtCore.QRect(380, 360, 111, 31))
        self.label_ID_Enr.setStyleSheet("border: 1px solid transparent;\n"
                                        "color: transparent;")
        self.label_ID_Enr.setText("")
        self.label_ID_Enr.setObjectName("label_ID_Enr")
        self.label_ID_Recup = QtWidgets.QLabel(self.tasaisie_identite_tab)
        self.label_ID_Recup.setGeometry(QtCore.QRect(43, 3, 71, 41))
        self.label_ID_Recup.setStyleSheet("background-color: rgb(0, 1, 146);\n"
                                          "color: rgb(186, 209, 248);\n"
                                          "font: 75 16pt \"Century Gothic\";\n"
                                          "padding-left:5px;")
        self.label_ID_Recup.setObjectName("label_ID_Recup")
        self.attention_lbl = QtWidgets.QLabel(self.tasaisie_identite_tab)
        self.attention_lbl.setGeometry(QtCore.QRect(-3, 391, 390, 31))
        self.attention_lbl.setStyleSheet("border: 1px solid transparent;")
        self.attention_lbl.setText("")
        self.attention_lbl.setObjectName("attention_lbl")
        self.result_label = QtWidgets.QLabel(self.tasaisie_identite_tab)
        self.result_label.setGeometry(QtCore.QRect(410, 393, 351, 31))
        self.result_label.setStyleSheet("border: 0px solid transparent;\n"
                                        "color: transparent;")
        self.result_label.setText("")
        self.result_label.setObjectName("result_label")
        self.line_6 = QtWidgets.QFrame(self.tasaisie_identite_tab)
        self.line_6.setGeometry(QtCore.QRect(-15, 37, 1291, 20))
        self.line_6.setStyleSheet("")
        self.line_6.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_6.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_6.setObjectName("line_6")
        self.id_lbl.raise_()
        self.gridLayoutWidget_2.raise_()
        self.first_btn.raise_()
        self.previous_btn.raise_()
        self.last_btn.raise_()
        self.next_btn.raise_()
        self.add_btn.raise_()
        self.edit_btn.raise_()
        self.del_btn.raise_()
        self.Recherche.raise_()
        self.search_lineEdit_2.raise_()
        self.search_btn_2.raise_()
        self.erase_all_widgets_btn.raise_()
        self.line_3.raise_()
        self.line.raise_()
        self.id_content_lbl.raise_()
        self.label_ID_Enr.raise_()
        self.label_ID_Recup.raise_()
        self.attention_lbl.raise_()
        self.result_label.raise_()
        self.line_6.raise_()
        self.tw_identity.addTab(self.tasaisie_identite_tab, "")
        self.saisie_diagnostic_tab = QtWidgets.QWidget()
        self.saisie_diagnostic_tab.setObjectName("saisie_diagnostic_tab")
        self.symptom_lbl = QtWidgets.QLabel(self.saisie_diagnostic_tab)
        self.symptom_lbl.setGeometry(QtCore.QRect(10, 45, 161, 21))
        self.symptom_lbl.setStyleSheet("font: 12pt \"Century Gothic\";\n"
                                       "color: rgb(51, 51, 51);")
        self.symptom_lbl.setObjectName("symptom_lbl")
        self.horizontalLayoutWidget_2 = QtWidgets.QWidget(self.saisie_diagnostic_tab)
        self.horizontalLayoutWidget_2.setGeometry(QtCore.QRect(10, 65, 1220, 42))
        self.horizontalLayoutWidget_2.setObjectName("horizontalLayoutWidget_2")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_2)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.temp_lbl = QtWidgets.QLabel(self.horizontalLayoutWidget_2)
        self.temp_lbl.setStyleSheet("font: 12pt \"Century Gothic\";\n"
                                    "color: rgb(51, 51, 51);\n"
                                    "padding-left: 10px;")
        self.temp_lbl.setObjectName("temp_lbl")
        self.horizontalLayout_2.addWidget(self.temp_lbl)
        self.temp_ledit = QtWidgets.QLineEdit(self.horizontalLayoutWidget_2)
        self.temp_ledit.setStyleSheet("\n"
                                      "    background-color: rgb(186, 209, 248);")
        self.temp_ledit.setInputMask("")
        self.temp_ledit.setObjectName("temp_ledit")
        self.horizontalLayout_2.addWidget(self.temp_ledit)
        self.tabd_lbl = QtWidgets.QLabel(self.horizontalLayoutWidget_2)
        self.tabd_lbl.setStyleSheet("font: 12pt \"Century Gothic\";\n"
                                    "color: rgb(51, 51, 51);\n"
                                    "padding-left: 10px;")
        self.tabd_lbl.setObjectName("tabd_lbl")
        self.horizontalLayout_2.addWidget(self.tabd_lbl)
        self.tabd_ledit = QtWidgets.QLineEdit(self.horizontalLayoutWidget_2)
        self.tabd_ledit.setStyleSheet("\n"
                                      "    background-color: rgb(186, 209, 248);")
        self.tabd_ledit.setInputMask("")
        self.tabd_ledit.setObjectName("tabd_ledit")
        self.horizontalLayout_2.addWidget(self.tabd_ledit)
        self.tabg_lbl = QtWidgets.QLabel(self.horizontalLayoutWidget_2)
        self.tabg_lbl.setStyleSheet("font: 12pt \"Century Gothic\";\n"
                                    "color: rgb(51, 51, 51);\n"
                                    "padding-left: 10px;")
        self.tabg_lbl.setObjectName("tabg_lbl")
        self.horizontalLayout_2.addWidget(self.tabg_lbl)
        self.tabg_ledit = QtWidgets.QLineEdit(self.horizontalLayoutWidget_2)
        self.tabg_ledit.setStyleSheet("\n"
                                      "    background-color: rgb(186, 209, 248);")
        self.tabg_ledit.setInputMask("")
        self.tabg_ledit.setObjectName("tabg_ledit")
        self.horizontalLayout_2.addWidget(self.tabg_ledit)
        self.bg_lbl = QtWidgets.QLabel(self.horizontalLayoutWidget_2)
        self.bg_lbl.setStyleSheet("font: 12pt \"Century Gothic\";\n"
                                  "color: rgb(51, 51, 51);\n"
                                  "padding-left: 10px;")
        self.bg_lbl.setObjectName("bg_lbl")
        self.horizontalLayout_2.addWidget(self.bg_lbl)
        self.bg_ledit = QtWidgets.QLineEdit(self.horizontalLayoutWidget_2)
        self.bg_ledit.setStyleSheet("\n"
                                    "    background-color: rgb(186, 209, 248);")
        self.bg_ledit.setInputMask("")
        self.bg_ledit.setObjectName("bg_ledit")
        self.horizontalLayout_2.addWidget(self.bg_ledit)
        self.weight_lbl = QtWidgets.QLabel(self.horizontalLayoutWidget_2)
        self.weight_lbl.setStyleSheet("font: 12pt \"Century Gothic\";\n"
                                      "color: rgb(51, 51, 51);\n"
                                      "padding-left: 10px;")
        self.weight_lbl.setObjectName("weight_lbl")
        self.horizontalLayout_2.addWidget(self.weight_lbl)
        self.weight_ledit = QtWidgets.QLineEdit(self.horizontalLayoutWidget_2)
        self.weight_ledit.setStyleSheet("\n"
                                        "    background-color: rgb(186, 209, 248);")
        self.weight_ledit.setInputMask("")
        self.weight_ledit.setObjectName("weight_ledit")
        self.horizontalLayout_2.addWidget(self.weight_ledit)
        self.record_id_2 = QtWidgets.QLabel(self.saisie_diagnostic_tab)
        self.record_id_2.setGeometry(QtCore.QRect(550, 360, 61, 40))
        self.record_id_2.setStyleSheet("/*background-color: rgb(0, 1, 146);\n"
                                       "color: rgb(186, 209, 248);\n"
                                       "font: 75 16pt \"Century Gothic\";\n"
                                       "padding-left:5px;*/\n"
                                       "\n"
                                       "color: transparent;")
        self.record_id_2.setObjectName("record_id_2")
        self.id_lbl_2 = QtWidgets.QLabel(self.saisie_diagnostic_tab)
        self.id_lbl_2.setGeometry(QtCore.QRect(11, 4, 34, 40))
        self.id_lbl_2.setStyleSheet("font: 12pt \"Century Gothic\";\n"
                                    "font-weight: bold;\n"
                                    "color: rgb(51, 51, 51);\n"
                                    "padding-left: 10px;")
        self.id_lbl_2.setObjectName("id_lbl_2")
        self.previous_btn_2 = QtWidgets.QPushButton(self.saisie_diagnostic_tab)
        self.previous_btn_2.setGeometry(QtCore.QRect(62, 359, 51, 31))
        self.previous_btn_2.setStyleSheet("QPushButton{\n"
                                          "    background-color: rgb(0, 1, 146);\n"
                                          "    border-radius: 3px;\n"
                                          "    color: rgb(186, 209, 24);\n"
                                          "    border: 1px outset gray;\n"
                                          "    font: 12pt \"Century Gothic\";\n"
                                          "}\n"
                                          "\n"
                                          "QPushButton:hover{\n"
                                          "    color: orange;\n"
                                          "    border-radius: 3px;\n"
                                          "    border: 1px outset gray;\n"
                                          "    font: 12pt \"Century Gothic\";\n"
                                          "}\n"
                                          "")
        self.previous_btn_2.setObjectName("previous_btn_2")
        self.first_btn_2 = QtWidgets.QPushButton(self.saisie_diagnostic_tab)
        self.first_btn_2.setGeometry(QtCore.QRect(10, 359, 51, 31))
        self.first_btn_2.setStyleSheet("QPushButton{\n"
                                       "    background-color: rgb(0, 1, 146);\n"
                                       "    border-radius: 3px;\n"
                                       "    color: rgb(186, 209, 24);\n"
                                       "    border: 1px outset gray;\n"
                                       "    font: 12pt \"Century Gothic\";\n"
                                       "}\n"
                                       "\n"
                                       "QPushButton:hover{\n"
                                       "    color: orange;\n"
                                       "    border-radius: 3px;\n"
                                       "    border: 1px outset gray;\n"
                                       "    font: 12pt \"Century Gothic\";\n"
                                       "}\n"
                                       "")
        self.first_btn_2.setObjectName("first_btn_2")
        self.last_btn_2 = QtWidgets.QPushButton(self.saisie_diagnostic_tab)
        self.last_btn_2.setGeometry(QtCore.QRect(182, 360, 51, 31))
        self.last_btn_2.setStyleSheet("QPushButton{\n"
                                      "    background-color: rgb(0, 1, 146);\n"
                                      "    border-radius: 3px;\n"
                                      "    color: rgb(186, 209, 24);\n"
                                      "    border: 1px outset gray;\n"
                                      "    font: 12pt \"Century Gothic\";\n"
                                      "}\n"
                                      "\n"
                                      "QPushButton:hover{\n"
                                      "    color: orange;\n"
                                      "    border-radius: 3px;\n"
                                      "    border: 1px outset gray;\n"
                                      "    font: 12pt \"Century Gothic\";\n"
                                      "}\n"
                                      "")
        self.last_btn_2.setObjectName("last_btn_2")
        self.next_btn_2 = QtWidgets.QPushButton(self.saisie_diagnostic_tab)
        self.next_btn_2.setGeometry(QtCore.QRect(130, 360, 51, 31))
        self.next_btn_2.setStyleSheet("QPushButton{\n"
                                      "    background-color: rgb(0, 1, 146);\n"
                                      "    border-radius: 3px;\n"
                                      "    color: rgb(186, 209, 24);\n"
                                      "    border: 1px outset gray;\n"
                                      "    font: 12pt \"Century Gothic\";\n"
                                      "}\n"
                                      "\n"
                                      "QPushButton:hover{\n"
                                      "    color: orange;\n"
                                      "    border-radius: 3px;\n"
                                      "    border: 1px outset gray;\n"
                                      "    font: 12pt \"Century Gothic\";\n"
                                      "}\n"
                                      "")
        self.next_btn_2.setObjectName("next_btn_2")
        self.line_2 = QtWidgets.QFrame(self.saisie_diagnostic_tab)
        self.line_2.setGeometry(QtCore.QRect(-3, 345, 1251, 20))
        self.line_2.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.add_btn_2 = QtWidgets.QPushButton(self.saisie_diagnostic_tab)
        self.add_btn_2.setGeometry(QtCore.QRect(639, 360, 191, 41))
        self.add_btn_2.setStyleSheet("QPushButton{\n"
                                     "    background-color:  rgb(25,135,84);\n"
                                     "    border-radius: 3px;\n"
                                     "    color: white;\n"
                                     "    border: 1px inset gray;\n"
                                     "    font: 16pt \"Century Gothic\";\n"
                                     "}\n"
                                     "\n"
                                     "QPushButton:hover{\n"
                                     "    background-color: #adc4ad;\n"
                                     "    border-radius: 3px;\n"
                                     "    border: 1px inset gray;\n"
                                     "    color: black;\n"
                                     "    font: 16pt \"Century Gothic\";\n"
                                     "}")
        self.add_btn_2.setObjectName("add_btn_2")
        self.edit_btn_2 = QtWidgets.QPushButton(self.saisie_diagnostic_tab)
        self.edit_btn_2.setGeometry(QtCore.QRect(839, 360, 191, 41))
        self.edit_btn_2.setStyleSheet("QPushButton{\n"
                                      "    background-color: rgb(13,110,253);\n"
                                      "    border-radius: 3px;\n"
                                      "    color: white;\n"
                                      "    border: 1px inset gray;\n"
                                      "    font: 16pt \"Century Gothic\";\n"
                                      "}\n"
                                      "\n"
                                      "QPushButton:hover{\n"
                                      "    background-color: rgb(13,202,240);\n"
                                      "    border-radius: 3px;\n"
                                      "    border: 1px inset gray;\n"
                                      "    color: black;\n"
                                      "    font: 16pt \"Century Gothic\";\n"
                                      "}")
        self.edit_btn_2.setObjectName("edit_btn_2")
        self.del_btn_2 = QtWidgets.QPushButton(self.saisie_diagnostic_tab)
        self.del_btn_2.setGeometry(QtCore.QRect(1039, 360, 191, 41))
        self.del_btn_2.setStyleSheet("QPushButton{\n"
                                     "    background-color:  orange;\n"
                                     "    border-radius: 3px;\n"
                                     "    color: white;\n"
                                     "    border: 1px inset gray;\n"
                                     "    font: 16pt \"Century Gothic\";\n"
                                     "}\n"
                                     "\n"
                                     "QPushButton:hover{\n"
                                     "    background-color: rgb(255, 193, 7);\n"
                                     "    border-radius: 3px;\n"
                                     "    border: 1px inset gray;\n"
                                     "    color: black;\n"
                                     "    font: 16pt \"Century Gothic\";\n"
                                     "}")
        self.del_btn_2.setObjectName("del_btn_2")
        self.id_content_lbl_2 = QtWidgets.QLabel(self.saisie_diagnostic_tab)
        self.id_content_lbl_2.setGeometry(QtCore.QRect(250, 360, 211, 31))
        self.id_content_lbl_2.setStyleSheet("border: 1px solid transparent;")
        self.id_content_lbl_2.setText("")
        self.id_content_lbl_2.setObjectName("id_content_lbl_2")
        self.label_ID_Recup_2 = QtWidgets.QLabel(self.saisie_diagnostic_tab)
        self.label_ID_Recup_2.setGeometry(QtCore.QRect(43, 3, 71, 41))
        self.label_ID_Recup_2.setStyleSheet("background-color: rgb(0, 1, 146);\n"
                                            "color: rgb(186, 209, 248);\n"
                                            "font: 75 16pt \"Century Gothic\";\n"
                                            "padding-left:5px;")
        self.label_ID_Recup_2.setObjectName("label_ID_Recup_2")
        self.layoutWidget = QtWidgets.QWidget(self.saisie_diagnostic_tab)
        self.layoutWidget.setGeometry(QtCore.QRect(10, 110, 1221, 241))
        self.layoutWidget.setObjectName("layoutWidget")
        self.gridLayout = QtWidgets.QGridLayout(self.layoutWidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        self.diagnostic_lbl = QtWidgets.QLabel(self.layoutWidget)
        self.diagnostic_lbl.setStyleSheet("font: 12pt \"Century Gothic\";\n"
                                          "color: rgb(51, 51, 51);")
        self.diagnostic_lbl.setObjectName("diagnostic_lbl")
        self.gridLayout.addWidget(self.diagnostic_lbl, 0, 0, 1, 1)
        self.treatments_lbl = QtWidgets.QLabel(self.layoutWidget)
        self.treatments_lbl.setStyleSheet("font: 12pt \"Century Gothic\";\n"
                                          "color: rgb(51, 51, 51);")
        self.treatments_lbl.setObjectName("treatments_lbl")
        self.gridLayout.addWidget(self.treatments_lbl, 0, 1, 1, 1)
        self.diagnostic_textEdit = QtWidgets.QTextEdit(self.layoutWidget)
        self.diagnostic_textEdit.setStyleSheet("\n"
                                               "    background-color: rgb(186, 209, 248);")
        self.diagnostic_textEdit.setObjectName("diagnostic_textEdit")
        self.gridLayout.addWidget(self.diagnostic_textEdit, 1, 0, 1, 1)
        self.treatments_textEdit = QtWidgets.QTextEdit(self.layoutWidget)
        self.treatments_textEdit.setStyleSheet("\n"
                                               "    background-color: rgb(186, 209, 248);")
        self.treatments_textEdit.setObjectName("treatments_textEdit")
        self.gridLayout.addWidget(self.treatments_textEdit, 1, 1, 3, 1)
        self.observeations_lbl = QtWidgets.QLabel(self.layoutWidget)
        self.observeations_lbl.setStyleSheet("font: 12pt \"Century Gothic\";\n"
                                             "color: rgb(51, 51, 51);")
        self.observeations_lbl.setObjectName("observeations_lbl")
        self.gridLayout.addWidget(self.observeations_lbl, 2, 0, 1, 1)
        self.observations_textEdit = QtWidgets.QTextEdit(self.layoutWidget)
        self.observations_textEdit.setStyleSheet("\n"
                                                 "    background-color: rgb(186, 209, 248);")
        self.observations_textEdit.setObjectName("observations_textEdit")
        self.gridLayout.addWidget(self.observations_textEdit, 3, 0, 1, 1)
        self.attention_lbl_2 = QtWidgets.QLabel(self.saisie_diagnostic_tab)
        self.attention_lbl_2.setGeometry(QtCore.QRect(-3, 391, 390, 31))
        self.attention_lbl_2.setStyleSheet("border: 1px solid transparent;")
        self.attention_lbl_2.setText("")
        self.attention_lbl_2.setObjectName("attention_lbl_2")
        self.erase_all_widgets_btn_2 = QtWidgets.QPushButton(self.saisie_diagnostic_tab)
        self.erase_all_widgets_btn_2.setGeometry(QtCore.QRect(1109, 4, 120, 40))
        self.erase_all_widgets_btn_2.setObjectName("erase_all_widgets_btn_2")
        self.line_7 = QtWidgets.QFrame(self.saisie_diagnostic_tab)
        self.line_7.setGeometry(QtCore.QRect(0, 37, 1291, 20))
        self.line_7.setStyleSheet("")
        self.line_7.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_7.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_7.setObjectName("line_7")
        self.tw_identity.addTab(self.saisie_diagnostic_tab, "")
        self.quit_btn = QtWidgets.QPushButton(self.centralwidget)
        self.quit_btn.setGeometry(QtCore.QRect(1049, 620, 191, 41))
        self.quit_btn.setStyleSheet("QPushButton{\n"
                                    "    background-color:  rgb(220, 53, 69);\n"
                                    "    border-radius: 3px;\n"
                                    "    color: white;\n"
                                    "    border: 1px inset gray;\n"
                                    "    font: 16pt \"Century Gothic\";\n"
                                    "}\n"
                                    "\n"
                                    "QPushButton:hover{\n"
                                    "    background-color: #ff9c8a;\n"
                                    "    border-radius: 3px;\n"
                                    "    border: 1px inset gray;\n"
                                    "    color: black;\n"
                                    "    font: 16pt \"Century Gothic\";\n"
                                    "}")
        self.quit_btn.setObjectName("quit_btn")
        self.label_date_heure_recup = QtWidgets.QLabel(self.centralwidget)
        self.label_date_heure_recup.setGeometry(QtCore.QRect(420, 626, 391, 31))
        self.label_date_heure_recup.setStyleSheet("border: 1px solid transparent;")
        self.label_date_heure_recup.setText("")
        self.label_date_heure_recup.setObjectName("label_date_heure_recup")
        self.infos_csmcg_lbl_2 = QtWidgets.QLabel(self.centralwidget)
        self.infos_csmcg_lbl_2.setGeometry(QtCore.QRect(-2, 662, 1271, 31))
        font = QtGui.QFont()
        font.setFamily("Montserrat,Roboto,Lato,Poppins,Oswald,Raleway,Arial,sans-serif,Verdana,sans-serif")
        font.setBold(False)
        font.setWeight(50)
        self.infos_csmcg_lbl_2.setFont(font)
        self.infos_csmcg_lbl_2.setStyleSheet(
            "font-family: \"Montserrat\", Roboto, Lato, Poppins, Oswald, Raleway, \"Arial\", sans-serif, \"Verdana\", "
            "sans-serif;\n"
            "color: #000;\n"
            "text-shadow: -1px -1px 3px #888; /* Ombre externe claire */\n"
            "")
        self.infos_csmcg_lbl_2.setAlignment(QtCore.Qt.AlignCenter)
        self.infos_csmcg_lbl_2.setObjectName("infos_csmcg_lbl_2")
        self.line_bas = QtWidgets.QFrame(self.centralwidget)
        self.line_bas.setGeometry(QtCore.QRect(-10, 656, 1291, 20))
        self.line_bas.setStyleSheet("")
        self.line_bas.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_bas.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_bas.setObjectName("line_bas")
        self.line_bas_2 = QtWidgets.QFrame(self.centralwidget)
        self.line_bas_2.setGeometry(QtCore.QRect(0, 694, 1281, 20))
        self.line_bas_2.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_bas_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_bas_2.setObjectName("line_bas_2")

        self.line_bas_3 = QtWidgets.QFrame(self.centralwidget)
        self.line_bas_3.setGeometry(QtCore.QRect(0, 696, 1281, 20))
        self.line_bas_3.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_bas_3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_bas_3.setObjectName("line_bas_3")

        self.infos_csmcg_lbl = QtWidgets.QLabel(self.centralwidget)
        self.infos_csmcg_lbl.setGeometry(QtCore.QRect(-2, 677, 1271, 31))
        font = QtGui.QFont()
        font.setFamily("Montserrat,Roboto,Lato,Poppins,Oswald,Raleway,Arial,sans-serif,Verdana,sans-serif")
        self.infos_csmcg_lbl.setFont(font)
        self.infos_csmcg_lbl.setStyleSheet(
            "font-family: \"Montserrat\", Roboto, Lato, Poppins, Oswald, Raleway, \"Arial\", sans-serif, \"Verdana\", "
            "sans-serif;\n"
            "color: #000;\n"
            "text-shadow: -1px -1px 3px #888; /* Ombre externe claire */")
        self.infos_csmcg_lbl.setLineWidth(1)
        self.infos_csmcg_lbl.setAlignment(QtCore.Qt.AlignCenter)
        self.infos_csmcg_lbl.setIndent(-1)
        self.infos_csmcg_lbl.setObjectName("infos_csmcg_lbl")
        dashboard_window.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(dashboard_window)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1266, 23))
        self.menubar.setObjectName("menubar")
        dashboard_window.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(dashboard_window)
        self.statusbar.setObjectName("statusbar")
        dashboard_window.setStatusBar(self.statusbar)

        self.retranslateUi(dashboard_window)
        QtCore.QMetaObject.connectSlotsByName(dashboard_window)
        self.tw_identity.setCurrentIndex(0)
        dashboard_window.setTabOrder(self.tw_identity, self.search_lineEdit)
        dashboard_window.setTabOrder(self.search_lineEdit, self.restitute_tbl)
        dashboard_window.setTabOrder(self.restitute_tbl, self.refresh_btn)
        dashboard_window.setTabOrder(self.refresh_btn, self.search_lineEdit_2)
        dashboard_window.setTabOrder(self.search_lineEdit_2, self.search_btn_2)
        dashboard_window.setTabOrder(self.search_btn_2, self.erase_all_widgets_btn)
        dashboard_window.setTabOrder(self.erase_all_widgets_btn, self.name_ledit)
        dashboard_window.setTabOrder(self.name_ledit, self.commune_ledit)
        dashboard_window.setTabOrder(self.commune_ledit, self.profession_ledit)
        dashboard_window.setTabOrder(self.profession_ledit, self.sector_spinBox)
        dashboard_window.setTabOrder(self.sector_spinBox, self.age_spinBox)
        dashboard_window.setTabOrder(self.age_spinBox, self.phone_ledit)
        dashboard_window.setTabOrder(self.phone_ledit, self.woman_rbtn)
        dashboard_window.setTabOrder(self.woman_rbtn, self.man_rbtn)
        dashboard_window.setTabOrder(self.man_rbtn, self.zone_comboBox)
        dashboard_window.setTabOrder(self.zone_comboBox, self.temp_ledit)
        dashboard_window.setTabOrder(self.temp_ledit, self.tabd_ledit)
        dashboard_window.setTabOrder(self.tabd_ledit, self.tabg_ledit)
        dashboard_window.setTabOrder(self.tabg_ledit, self.bg_ledit)
        dashboard_window.setTabOrder(self.bg_ledit, self.weight_ledit)
        dashboard_window.setTabOrder(self.weight_ledit, self.diagnostic_textEdit)
        dashboard_window.setTabOrder(self.diagnostic_textEdit, self.treatments_textEdit)
        dashboard_window.setTabOrder(self.treatments_textEdit, self.observations_textEdit)
        dashboard_window.setTabOrder(self.observations_textEdit, self.first_btn_2)
        dashboard_window.setTabOrder(self.first_btn_2, self.previous_btn_2)
        dashboard_window.setTabOrder(self.previous_btn_2, self.next_btn_2)
        dashboard_window.setTabOrder(self.next_btn_2, self.last_btn_2)
        dashboard_window.setTabOrder(self.last_btn_2, self.add_btn_2)
        dashboard_window.setTabOrder(self.add_btn_2, self.edit_btn_2)
        dashboard_window.setTabOrder(self.edit_btn_2, self.del_btn_2)
        dashboard_window.setTabOrder(self.del_btn_2, self.quit_btn)
        dashboard_window.setTabOrder(self.quit_btn, self.date_heure)
        dashboard_window.setTabOrder(self.date_heure, self.del_btn)
        dashboard_window.setTabOrder(self.del_btn, self.previous_btn)
        dashboard_window.setTabOrder(self.previous_btn, self.add_btn)
        dashboard_window.setTabOrder(self.add_btn, self.edit_btn)
        dashboard_window.setTabOrder(self.edit_btn, self.last_btn)
        dashboard_window.setTabOrder(self.last_btn, self.next_btn)
        dashboard_window.setTabOrder(self.next_btn, self.first_btn)

        self.dashboard_window = dashboard_window  # Conserver une référence à la fenêtre principale dashboard_window
        self.quit_btn.clicked.connect(dashboard_window.close)

    def set_user_info(dashboard_window, username, authorization_level):
        """Configure le tableau de bord avec les informations de l'utilisateur connecté."""
        dashboard_window.name_user_auth_lbl.setText(f"{username.capitalize()} - {authorization_level.capitalize()}")
        dashboard_window.name_user_auth_lbl.setStyleSheet("font-size: 16px; font-style: italic; color: #ff0000;")

        # Afficher le bouton "Gestion des identifiants" uniquement pour les administrateurs
        if authorization_level.capitalize() == "Administrateur - 0":
            dashboard_window.manage_users_btn.setVisible(True)
            dashboard_window.manage_users_btn.clicked.connect(dashboard_window.open_manage_users_popup)

    def open_manage_users_popup(self):
        """Ouvre le popup de gestion des identifiants des utilisateurs avec corrections pour ajout et modification."""
        popup = QDialog(self.dashboard_window)
        popup.setWindowTitle("Gestion des identifiants utilisateurs")
        popup.setFixedSize(400, 650)
        popup.setStyleSheet("background-color: rgb(240, 240, 240);")

        layout = QVBoxLayout(popup)
        # old_login = None  # Variable pour suivre l'ancien login lors de la modification

        # Champ de recherche interactif
        search_label = QLabel("Rechercher :")
        search_label.setStyleSheet("color: rgb(0, 1, 146); font-size: 12px;")
        search_edit = QLineEdit()
        search_edit.setStyleSheet("background-color: rgb(200, 230, 255);")
        layout.addWidget(search_label)
        layout.addWidget(search_edit)

        # Champ Login
        login_label = QLabel("Login :")
        login_label.setStyleSheet("color: rgb(0, 1, 146); font-size: 12px;")
        login_edit = QLineEdit()
        login_edit.setStyleSheet("background-color: rgb(200, 230, 255);")
        layout.addWidget(login_label)
        layout.addWidget(login_edit)

        # Champ Mot de Passe
        password_label = QLabel("Mot de passe :")
        password_label.setStyleSheet("color: rgb(0, 1, 146); font-size: 12px;")
        password_edit = QLineEdit()
        password_edit.setStyleSheet("background-color: rgb(200, 230, 255);")
        password_edit.setEchoMode(QLineEdit.Password)
        layout.addWidget(password_label)
        layout.addWidget(password_edit)

        # Bouton pour afficher/masquer le mot de passe
        toggle_password_btn = QPushButton("Afficher/Masquer")
        toggle_password_btn.setStyleSheet("background-color: rgb(0, 1, 146); color: white;")
        layout.addWidget(toggle_password_btn)

        def toggle_password_visibility():
            if password_edit.echoMode() == QLineEdit.Password:
                password_edit.setEchoMode(QLineEdit.Normal)
            else:
                password_edit.setEchoMode(QLineEdit.Password)

        toggle_password_btn.clicked.connect(toggle_password_visibility)

        # Champ Niveau
        level_label = QLabel("Niveau :")
        level_label.setStyleSheet("color: rgb(0, 1, 146); font-size: 12px;")
        level_combo = QComboBox()
        roles = [
            "Choisir le niveau de rôle",
            "Administrateur - 0",
            "Superviseur - 1",
            "Utilisateur - 2"
        ]
        level_combo.addItems(roles)
        level_combo.setStyleSheet("background-color: rgb(200, 230, 255);")
        layout.addWidget(level_label)
        layout.addWidget(level_combo)

        # Boutons Ajouter, Modifier, Supprimer
        buttons_layout = QHBoxLayout()

        add_btn_admin = QPushButton("Ajouter")
        add_btn_admin.setStyleSheet("background-color: rgb(0, 1, 146); color: white;")
        add_btn_admin.clicked.connect(
            lambda: self.manage_user("ajouter", login_edit.text(), password_edit.text(), level_combo.currentText(),
                                     login_edit, password_edit, level_combo))

        edit_btn_admin = QPushButton("Modifier")
        edit_btn_admin.setStyleSheet("background-color: rgb(0, 1, 146); color: white;")
        edit_btn_admin.clicked.connect(
            lambda: self.manage_user("modifier", login_edit.text(), password_edit.text(), level_combo.currentText(),
                                     login_edit, password_edit, level_combo, old_login=old_login))

        delete_btn = QPushButton("Supprimer")
        delete_btn.setStyleSheet("background-color: rgb(0, 1, 146); color: white;")
        delete_btn.clicked.connect(
            lambda: self.manage_user("supprimer", login_edit.text(), password_edit.text(), level_combo.currentText(),
                                     login_edit, password_edit, level_combo))

        buttons_layout.addWidget(add_btn_admin)
        buttons_layout.addWidget(edit_btn_admin)
        buttons_layout.addWidget(delete_btn)

        layout.addLayout(buttons_layout)

        # Bouton Effacer
        clear_btn = QPushButton("Effacer")
        clear_btn.setStyleSheet("background-color: rgb(0, 1, 146); color: white;")
        layout.addWidget(clear_btn)

        # Effacer les champs
        def clear_fields():
            login_edit.clear()
            password_edit.clear()
            level_combo.setCurrentIndex(0)

        clear_btn.clicked.connect(clear_fields)

        # Recherche interactive
        def perform_search():
            """Recherche un utilisateur et remplit les champs."""
            nonlocal old_login # utiliser la variable globale old_login
            db = sqlite3.connect("croixg.db")
            cursor = db.cursor()
            cursor.execute("SELECT Login, MotDePasse, NiveauUtilisateur FROM cg_connexion WHERE Login LIKE ?",
                           (f"%{search_edit.text()}%",))
            result = cursor.fetchone() # Récupérer un seul résultat

            if result:
                # Mettre à jour les champs avec les résultats de la base de données trouvés
                login_edit.setText(result[0])  # Remplir le champ Login
                password_edit.setText(result[1])  # Remplir le champ Mot de Passe
                level_combo.setCurrentText(result[2])  # Remplir le champ Niveau

                # Mettre à jour old_login avec le login trouvé
                old_login = result[0]
                # > Pas utile > QMessageBox.information(None, "Résultat de la recherche", "Utilisateur trouvé et
                # champs remplis.", QMessageBox.Ok)

                # Trouver l'index correspondant au rôle dans la liste
                role_string = result[2]
                if role_string in roles:
                    level_combo.setCurrentIndex(roles.index(role_string))
                else:
                    QMessageBox.warning(None, "Erreur", "Le niveau de rôle n'existe pas dans la liste.", QMessageBox.Ok)
            else:
                QMessageBox.information(None, "Résultat de la recherche", "Aucun utilisateur trouvé.", QMessageBox.Ok)

            db.close()

        search_edit.textChanged.connect(perform_search)

        # Tableau des identifiants
        self.table = QTableWidget()
        self.table.setColumnCount(3)
        self.table.setHorizontalHeaderLabels(["Login", "Mot de Passe", "Niveau"])
        self.table.horizontalHeader().setStretchLastSection(True)
        self.table.setStyleSheet("background-color: rgb(240, 240, 240);")
        layout.addWidget(self.table)
        # Mettre à jour le tableau avec le contenu de la table `cg_connexion`
        self.update_table()  # IMPORTANT : Appeler ici pour afficher les données initiales

        old_login = None  # Variable pour stocker l'ancien login

        # Détecter les clics sur les lignes du tableau
        def on_table_click(row, column):
            nonlocal old_login
            old_login = self.table.item(row, 0).text()  # Colonne 0 : Login
            login_edit.setText(old_login)
            password_edit.setText(self.table.item(row, 1).text())  # Colonne 1 : Mot de passe
            level_combo.setCurrentText(self.table.item(row, 2).text())  # Colonne 2 : Niveau

        self.table.cellClicked.connect(on_table_click)

        # Bouton de fermeture
        close_btn = QPushButton("Fermer")
        close_btn.setStyleSheet("background-color: rgb(0, 1, 146); color: white;")
        close_btn.clicked.connect(popup.close)
        close_btn.clicked.connect(lambda: popup.accept()) # Fermer la fenêtre de popup
        layout.addWidget(close_btn)

        popup.setLayout(layout)
        popup.exec_()

    def update_table(self):
        """Mise à jour du tableau des identifiants."""
        try:
            db = sqlite3.connect("croixg.db")
            cursor = db.cursor()
            cursor.execute("SELECT Login, MotDePasse, NiveauUtilisateur FROM cg_connexion")  # Récupérer les données
            rows = cursor.fetchall()  # Liste des enregistrements
            db.close()

            # Remplir le tableau avec les données récupérées
            self.table.setRowCount(len(rows))  # Définir le nombre de lignes
            for row_index, row_data in enumerate(rows):
                for col_index, col_data in enumerate(row_data):
                    self.table.setItem(row_index, col_index, QTableWidgetItem(str(col_data)))  # Ajouter les données
        except Exception as e:
            QMessageBox.warning(None, "Erreur", f"Impossible de charger les données : {str(e)}", QMessageBox.Ok)

    def manage_user(self, action, login, password, level, login_edit, password_edit, level_combo, old_login=None):
        """Ajoute, modifie ou supprime un utilisateur dans la base de données."""
        try:
            db = sqlite3.connect("croixg.db")
            cursor = db.cursor()

            if action == "ajouter":
                # Vérifiez si l'utilisateur existe déjà
                cursor.execute("SELECT COUNT(*) FROM cg_connexion WHERE Login = ?", (login,))
                if cursor.fetchone()[0] > 0:
                    QMessageBox.warning(None, "Erreur", "Cet utilisateur existe déjà.", QMessageBox.Ok)
                    return

                cursor.execute("INSERT INTO cg_connexion (Login, MotDePasse, NiveauUtilisateur) VALUES (?, ?, ?)",
                               (login, password, level))
            elif action == "modifier":
                if not old_login:  # Vérifiez que old_login est défini
                    QMessageBox.warning(None, "Erreur", "Ancien login non défini pour la modification.", QMessageBox.Ok)
                    return

                # Vérifiez si l'ancien login existe avant de modifier
                cursor.execute("SELECT COUNT(*) FROM cg_connexion WHERE Login = ?", (old_login,))
                if cursor.fetchone()[0] == 0:
                    QMessageBox.warning(None, "Erreur", "Utilisateur introuvable pour modification.", QMessageBox.Ok)
                    return

                # Modifier les informations, y compris le login
                cursor.execute(
                    "UPDATE cg_connexion SET Login = ?, MotDePasse = ?, NiveauUtilisateur = ? WHERE Login = ?",
                    (login, password, level, old_login))

            elif action == "supprimer":
                cursor.execute("DELETE FROM cg_connexion WHERE Login = ?", (login,))
            else:
                raise ValueError("Action non valide")

            # Mettre à jour la base de données
            if action in ["ajouter", "modifier", "supprimer"]:
                self.update_table()

            db.commit()
            QMessageBox.information(None, "Succès", f"L'opération '{action}' a été effectuée avec succès.",
                                    QMessageBox.Ok)

            # Réinitialiser les champs
            login_edit.clear()
            password_edit.clear()
            level_combo.setCurrentIndex(0)
            # Mettre à jour le tableau après l'opération
            self.update_table()

        except Exception as e:
            QMessageBox.warning(None, "Erreur", f"L'opération '{action}' a échoué : {str(e)}", QMessageBox.Ok)
        finally:
            db.close()

    def search_user(self, login, password_edit, level_combo):
        """Recherche un utilisateur et remplit les champs."""
        try:
            db = sqlite3.connect("croixg.db")
            cursor = db.cursor()
            cursor.execute("SELECT MotDePasse, NiveauUtilisateur FROM cg_connexion WHERE Login = ?", (login,))
            result = cursor.fetchone()

            if result:
                password, level = result
                password_edit.setText(password)
                level_combo.setCurrentIndex(int(level) + 1)
                QMessageBox.information(None, "Succès", f"Utilisateur '{login}' trouvé.", QMessageBox.Ok)
            else:
                QMessageBox.warning(None, "Erreur", f"Utilisateur '{login}' introuvable.", QMessageBox.Ok)
        except Exception as e:
            QMessageBox.warning(None, "Erreur", f"La recherche a échoué : {str(e)}", QMessageBox.Ok)
        finally:
            db.close()

    def install_event_filters(self):
        """Installe le filtre d'événements sur les champs concernés."""
        # self.validator_handler = CustomValidatorHandler(self)

        # Champs interdisant les lettres
        self.validator_handler = CustomValidatorHandler(self.centralwidget)

        # Champs interdisant les chiffres
        self.name_ledit.setObjectName("name_ledit")
        self.name_ledit.installEventFilter(self.validator_handler)

        self.profession_ledit.setObjectName("profession_ledit")
        self.profession_ledit.installEventFilter(self.validator_handler)

        # Champ interdisant les lettres (sauf +)
        self.phone_ledit.setObjectName("phone_ledit")
        self.phone_ledit.installEventFilter(self.validator_handler)

        # Champs interdisant les lettres (autorisant les chiffres et le point)
        numeric_lineedits = [
            self.temp_ledit,
            self.tabg_ledit,
            self.tabd_ledit,
            self.bg_ledit,
            self.weight_ledit,
        ]
        for i, lineedit in enumerate(numeric_lineedits):
            lineedit.setObjectName(f"{lineedit.objectName() or f'numeric_ledit_{i}'}")
            lineedit.installEventFilter(self.validator_handler)

    def retranslateUi(self, dashboard_window):
        _translate = QtCore.QCoreApplication.translate
        dashboard_window.setWindowTitle(_translate("dashboard_window", "Cabinet de Soins Médicaux la Croix Glorieuse"))
        self.header_lbl_2.setText(_translate("dashboard_window",
                                             "<html><head/><body><p align=\"center\">Cabinet de Soins Médicaux <span "
                                             "style=\" font-weight:600;\">LA CROIX GLORIEUSE</span></p></body></html>"))
        self.user_auth_lbl.setText(_translate("dashboard_window", "Utilisateur authentifié :"))
        item = self.restitute_tbl.horizontalHeaderItem(0)
        item.setText(_translate("dashboard_window", "N°"))
        item = self.restitute_tbl.horizontalHeaderItem(1)
        item.setText(_translate("dashboard_window", "Nom & Prénoms"))
        item = self.restitute_tbl.horizontalHeaderItem(2)
        item.setText(_translate("dashboard_window", "Profession"))
        item = self.restitute_tbl.horizontalHeaderItem(3)
        item.setText(_translate("dashboard_window", "Sexe"))
        item = self.restitute_tbl.horizontalHeaderItem(4)
        item.setText(_translate("dashboard_window", "Age"))
        item = self.restitute_tbl.horizontalHeaderItem(5)
        item.setText(_translate("dashboard_window", "Commune"))
        item = self.restitute_tbl.horizontalHeaderItem(6)
        item.setText(_translate("dashboard_window", "Secteur"))
        item = self.restitute_tbl.horizontalHeaderItem(7)
        item.setText(_translate("dashboard_window", "Téléphone"))
        item = self.restitute_tbl.horizontalHeaderItem(8)
        item.setText(_translate("dashboard_window", "Zone de résidence (en Km)"))
        item = self.restitute_tbl.horizontalHeaderItem(9)
        item.setText(_translate("dashboard_window", "T°"))
        item = self.restitute_tbl.horizontalHeaderItem(10)
        item.setText(_translate("dashboard_window", "TA BD"))
        item = self.restitute_tbl.horizontalHeaderItem(11)
        item.setText(_translate("dashboard_window", "TA BG"))
        item = self.restitute_tbl.horizontalHeaderItem(12)
        item.setText(_translate("dashboard_window", "BG"))
        item = self.restitute_tbl.horizontalHeaderItem(13)
        item.setText(_translate("dashboard_window", "Poids"))
        item = self.restitute_tbl.horizontalHeaderItem(14)
        item.setText(_translate("dashboard_window", "Diagnostic"))
        item = self.restitute_tbl.horizontalHeaderItem(15)
        item.setText(_translate("dashboard_window", "Traitements"))
        item = self.restitute_tbl.horizontalHeaderItem(16)
        item.setText(_translate("dashboard_window", "Observations"))
        item = self.restitute_tbl.horizontalHeaderItem(17)
        item.setText(_translate("dashboard_window", "Date et Heure"))
        self.refresh_btn.setText(_translate("dashboard_window", "Rafraichir"))
        self.manage_users_btn.setText(_translate("dashboard_window", "Gestion Utilisateurs"))
        self.search_lbl.setText(_translate("dashboard_window", "Recherche de Noms dans la base de données"))
        self.search_btn.setText(_translate("dashboard_window", "Actualiser"))
        self.tw_identity.setTabText(self.tw_identity.indexOf(self.patient_tab),
                                    _translate("dashboard_window", "Informations de Tous les Patients"))
        self.id_lbl.setText(_translate("dashboard_window", "ID"))
        self.phone_lbl.setText(_translate("dashboard_window", "Téléphone"))
        self.sector_lbl.setText(_translate("dashboard_window", "Secteur"))
        self.profession_lbl.setText(_translate("dashboard_window", "Profession"))
        self.commune_lbl.setText(_translate("dashboard_window", "Commune"))
        self.age_lbl.setText(_translate("dashboard_window", "Age"))
        self.woman_rbtn.setText(_translate("dashboard_window", "Féminin"))
        self.gender_lbl.setText(_translate("dashboard_window", "Sexe"))
        self.zone_comboBox.setItemText(0, _translate("dashboard_window", "Choisir la distance du domicile en Km"))
        self.zone_comboBox.setItemText(1, _translate("dashboard_window", "0-4"))
        self.zone_comboBox.setItemText(2, _translate("dashboard_window", "5-9"))
        self.zone_comboBox.setItemText(3, _translate("dashboard_window", "10 et plus"))
        self.zone_lbl.setText(_translate("dashboard_window", "<div>Zone de résidence</div><div> (en Km)</div>"))
        self.name_lbl.setText(_translate("dashboard_window", "Nom & Prénoms"))
        self.man_rbtn.setText(_translate("dashboard_window", "Masculin"))
        self.record_id.setText(_translate("dashboard_window", "0"))
        self.first_btn.setText(_translate("dashboard_window", "<<"))
        self.previous_btn.setText(_translate("dashboard_window", "<"))
        self.last_btn.setText(_translate("dashboard_window", ">>"))
        self.next_btn.setText(_translate("dashboard_window", ">"))
        self.add_btn.setText(_translate("dashboard_window", "Ajouter"))
        self.edit_btn.setText(_translate("dashboard_window", "Modifier"))
        self.del_btn.setText(_translate("dashboard_window", "supprimer"))
        self.Recherche.setText(_translate("dashboard_window", "Recherche pa Nom dans la Base de Donnée"))
        self.search_btn_2.setText(_translate("dashboard_window", "Rechercher"))
        self.erase_all_widgets_btn.setText(_translate("dashboard_window", "Effacer tout"))
        self.label_ID_Recup.setText(_translate("dashboard_window", "0"))
        self.tw_identity.setTabText(self.tw_identity.indexOf(self.tasaisie_identite_tab), _translate("dashboard_window",
                                                                                                     "Saisie Informations Identitaires et Résidentielles des Patients"))
        self.symptom_lbl.setText(_translate("dashboard_window", "Symptômes"))
        self.temp_lbl.setText(_translate("dashboard_window", "T°"))
        self.temp_ledit.setText(_translate("dashboard_window", "0"))
        self.tabd_lbl.setText(_translate("dashboard_window", "TA BD"))
        self.tabd_ledit.setText(_translate("dashboard_window", "0"))
        self.tabg_lbl.setText(_translate("dashboard_window", "TA BG"))
        self.tabg_ledit.setText(_translate("dashboard_window", "0"))
        self.bg_lbl.setText(_translate("dashboard_window", "BG"))
        self.bg_ledit.setText(_translate("dashboard_window", "0"))
        self.weight_lbl.setText(_translate("dashboard_window", "Poids"))
        self.weight_ledit.setText(_translate("dashboard_window", "0"))
        self.record_id_2.setText(_translate("dashboard_window", "0"))
        self.id_lbl_2.setText(_translate("dashboard_window", "ID"))
        self.previous_btn_2.setText(_translate("dashboard_window", "<"))
        self.first_btn_2.setText(_translate("dashboard_window", "<<"))
        self.last_btn_2.setText(_translate("dashboard_window", ">>"))
        self.next_btn_2.setText(_translate("dashboard_window", ">"))
        self.add_btn_2.setText(_translate("dashboard_window", "Ajouter"))
        self.edit_btn_2.setText(_translate("dashboard_window", "Modifier"))
        self.del_btn_2.setText(_translate("dashboard_window", "supprimer"))
        self.label_ID_Recup_2.setText(_translate("dashboard_window", "0"))
        self.diagnostic_lbl.setText(_translate("dashboard_window", "Diagnostic"))
        self.treatments_lbl.setText(_translate("dashboard_window", "Traitements"))
        self.observeations_lbl.setText(_translate("dashboard_window", "Observations"))
        self.erase_all_widgets_btn_2.setText(_translate("dashboard_window", "Effacer tout"))
        self.tw_identity.setTabText(self.tw_identity.indexOf(self.saisie_diagnostic_tab),
                                    _translate("dashboard_window", "Diagnostic des Patients"))
        self.quit_btn.setText(_translate("dashboard_window", "Quitter"))
        self.infos_csmcg_lbl_2.setText(
            _translate("dashboard_window", "Cabinet de Soins Médicaux \"LA CROIX GLORIEUSE\" "))
        self.infos_csmcg_lbl.setText(_translate("dashboard_window",
                                                "Cabinet de Soins Médicaux \"LA CROIX GLORIEUSE\" Secteur 16 - Song "
                                                "Naba - 05 bp 6592 Ouagadougou - Tél. +226 70 27 05 02 / 77 25 76 65 "
                                                "- Email : santeglorieuse@yahoo.fr"))

        # Ajout des validateurs
        self.add_validators()  # Ajouter les validateurs existants
        self.handle_buttons()
        self.install_event_filters()  # Installer les filtres d'événements

    def on_search_text_changed(self):
        # Réinitialisez le timer à chaque changement de texte
        self.search_timer.stop()
        self.search_timer.start(300)  # Démarrez le timer après 300 millisecondes

    def add_validators(self):
        """Ajoute des validateurs pour interdire les caractères non désirés dans les QLineEdit."""
        # 1. Validator pour interdire les chiffres dans `name_ledit`
        letter_lineedits = [self.name_ledit, self.profession_ledit]

        for ledit in letter_lineedits:
            no_digits_validator = QRegExpValidator(QRegExp(r"[^\d]+"), self.name_ledit)  # Tout sauf les chiffres
            ledit.setValidator(no_digits_validator)  # Appliquer au QLineEdit correspondant
            # self.name_ledit.setValidator(no_digits_validator)

        # 2. Créer des validateurs uniques pour chaque QLineEdit
        numeric_lineedits = [
            self.temp_ledit,
            self.tabg_ledit,
            self.tabd_ledit,
            self.bg_ledit,
            self.weight_ledit,
        ]

        for lineedit in numeric_lineedits:
            digits_only_validator = QRegExpValidator(QRegExp(r"\d*\.?\d+"), lineedit)  # Crée un validateur unique
            lineedit.setValidator(digits_only_validator)  # Appliquer au QLineEdit correspondant

        # 3. Validator pour `phone_ledit` : + en début, suivi de chiffres
        phone_validator = QRegExpValidator(QRegExp(r"\+?[0-9]+"), self.phone_ledit)  # + facultatif, suivi de chiffres
        self.phone_ledit.setValidator(phone_validator)

    def show_popup_on_click(self, row, column):
        # Récupérez les données de la ligne sélectionnée
        selected_row_data = [self.restitute_tbl.item(row, col).text() for col in
                             range(self.restitute_tbl.columnCount())]

        # Affichez un pop-up avec les détails de la ligne
        self.show_popup(selected_row_data)

    def get_data(self):

        # db = sqlite3.connect("croixg.db")
        # cursor = db.cursor()
        self.db_connection()

        command = ''' SELECT * FROM treatment_table'''

        result = self.cursor.execute(command)

        self.restitute_tbl.setRowCount(0)

        for row_number, row_data in enumerate(result):
            self.restitute_tbl.insertRow(row_number)
            for column_number, data in enumerate(row_data):
                self.restitute_tbl.setItem(row_number, column_number, QTableWidgetItem(str(data)))

    def showEvent(self, event):
        super(dashboard_window, self).showEvent(event)
        self.search_lineEdit.setFocus()
        self.search_lineEdit_2.setFocus()

    def handle_buttons(self):

        self.manage_users_btn.clicked.connect(self.open_manage_users_popup)

        # Définissez une minuterie pour mettre à jour l'heure toutes les secondes
        self.timer = QTimer(None)
        self.timer.timeout.connect(self.update_current_time)
        self.timer.start(1000)  # Mettez à jour toutes les 1000 millisecondes (1 seconde)

        # Ajoutez un QTimer pour déclencher la recherche après un délai court
        self.search_timer = QTimer()
        self.search_timer.timeout.connect(self.search_data_in_table)
        self.search_timer.timeout.connect(self.search_data_in_row)

        # Connect signals to capitalize function for QLineEdit
        self.name_ledit.textChanged.connect(lambda: capitalize_lineedit(self.name_ledit))
        self.profession_ledit.textChanged.connect(lambda: capitalize_lineedit(self.profession_ledit))
        self.commune_ledit.textChanged.connect(lambda: capitalize_lineedit(self.commune_ledit))

        # Connect textChanged signal to capitalize function for QTextEdits
        self.diagnostic_textEdit.textChanged.connect(lambda: capitalize_sentences(self.diagnostic_textEdit))
        self.treatments_textEdit.textChanged.connect(lambda: capitalize_sentences(self.treatments_textEdit))
        self.observations_textEdit.textChanged.connect(lambda: capitalize_sentences(self.observations_textEdit))

        # Connectez le signal textChanged à la fonction de recherche
        self.search_lineEdit.textChanged.connect(self.on_search_text_changed)
        self.search_lineEdit_2.textChanged.connect(self.search_data_in_widgets)
        self.add_btn.clicked.connect(self.add_data)
        self.add_btn_2.clicked.connect(self.add_data)

        self.del_btn.clicked.connect(self.delete_data)
        self.del_btn_2.clicked.connect(self.delete_data)

        self.erase_all_widgets_btn.clicked.connect(self.reset_all_fields)
        self.erase_all_widgets_btn_2.clicked.connect(self.reset_all_fields)

        self.refresh_btn.clicked.connect(self.get_data)
        # self.quit_btn.clicked.connect(self.close)

        self.edit_btn.clicked.connect(self.perform_update)
        self.edit_btn_2.clicked.connect(self.perform_update)

        # Connectez l'événement de clic de la table à votre fonction de gestion
        self.restitute_tbl.cellClicked.connect(self.show_popup_on_click)

        self.search_btn.clicked.connect(self.search_data_in_table)
        self.search_btn.setShortcut(Qt.Key_Return)
        self.search_btn_2.clicked.connect(self.search_data_in_table)
        self.search_btn_2.setShortcut(Qt.Key_Return)

        # Connect signals
        self.name_ledit.textChanged.connect(lambda: capitalize_lineedit(self.name_ledit))
        self.profession_ledit.textChanged.connect(lambda: capitalize_lineedit(self.profession_ledit))
        self.commune_ledit.textChanged.connect(lambda: capitalize_lineedit(self.commune_ledit))

        # Connect textChanged signal to capitalize function for QTextEdits
        self.diagnostic_textEdit.textChanged.connect(lambda: capitalize_sentences(self.diagnostic_textEdit))
        self.treatments_textEdit.textChanged.connect(lambda: capitalize_sentences(self.treatments_textEdit))
        self.observations_textEdit.textChanged.connect(lambda: capitalize_sentences(self.observations_textEdit))

        self.search_btn_2.clicked.connect(self.search_data)
        self.tw_identity.currentChanged.connect(self.handle_tab_change)

        # =================================================
        #       LES 4 BOUTONS DE NAVIGATION
        # =================================================

        self.next_btn.clicked.connect(self.meth_next_row)
        self.previous_btn.clicked.connect(self.meth_previous_row)
        self.last_btn.clicked.connect(self.meth_last_row)
        self.first_btn.clicked.connect(self.meth_first_row)

        self.next_btn_2.clicked.connect(self.meth_next_row)
        self.previous_btn_2.clicked.connect(self.meth_previous_row)
        self.last_btn_2.clicked.connect(self.meth_last_row)
        self.first_btn_2.clicked.connect(self.meth_first_row)
        # =================================================
        #       FIN 4 BOUTONS DE NAVIGATION
        # =================================================

    def get_widget_value(self, widget):
        # Obtenir la valeur du widget en fonction de son type
        if isinstance(widget, (QLineEdit, QTextEdit)):
            return widget.text()
        elif isinstance(widget, QSpinBox):
            return widget.value()
        elif isinstance(widget, QComboBox):
            return widget.currentText()
        elif isinstance(widget, QDateTimeEdit):
            return widget.dateTime().toString("yyyy-MM-dd HH:mm:ss")
        elif isinstance(widget, (QRadioButton, QCheckBox)):
            return widget.isChecked()
        else:
            return None  # Ajoutez d'autres cas au besoin

    def db_connection(self):
        self.db = sqlite3.connect("croixg.db")
        self.cursor = self.db.cursor()

    def set_connected_user(dashboard_window, user_name, niveau_utilisateur):
        dashboard_window.user_info = f"<strong>{user_name.upper()}</strong>  :  <em style='font-size: 14px;'>{niveau_utilisateur}</em>"
        # Affichez le nom de l'utilisateur connecté sur le label name_user_auth_lbl
        dashboard_window.name_user_auth_lbl.setText(dashboard_window.user_info)
        dashboard_window.name_user_auth_lbl.setStyleSheet('''
                color: #00018f;
                font-size: 16px;
                font-family: Century Gothic;
                /*font-weight: bold;*/
                padding-left: 10px;  ''')

    def update_current_time(self):
        # Obtenez l'heure actuelle
        self.current_time = QDateTime.currentDateTime()

        # Définissez l'heure actuelle dans le QDateTimeEdit
        self.date_heure.setDateTime(self.current_time)

    def handle_tab_change(self, index):
        if index == 0:
            self.search_lineEdit.setFocus()

        if index == 1:
            self.search_lineEdit_2.setFocus()

    def search_data_in_table(self):
        self.db_connection()

        # search_name = self.search_lineEdit.text()
        search_text = self.search_lineEdit.text()

        query = """SELECT * FROM treatment_table 
               WHERE NomPrenoms LIKE ? OR 
                     Profession LIKE ? OR 
                     Commune LIKE ? OR 
                     Secteur LIKE ? OR 
                     Telephone LIKE ?"""

        result = self.cursor.execute(query, (
            '%' + search_text + '%',
            '%' + search_text + '%',
            '%' + search_text + '%',
            '%' + search_text + '%',
            '%' + search_text + '%'
        ))
        self.restitute_tbl.setRowCount(0)
        for row_number, row_data in enumerate(result):
            self.restitute_tbl.insertRow(row_number)
            for column_number, data in enumerate(row_data):
                self.restitute_tbl.setItem(row_number, column_number, QTableWidgetItem(str(data)))
        data = result.fetchone()

    def search_data_in_row(self):
        self.db_connection()

        # search_name = self.search_lineEdit.text()
        search_text = self.search_lineEdit_2.text()

        query = """SELECT * FROM treatment_table 
               WHERE NomPrenoms LIKE ? OR 
                     Profession LIKE ? OR 
                     Commune LIKE ? OR 
                     Secteur LIKE ? OR 
                     Telephone LIKE ?"""

        result = self.cursor.execute(query, (
            '%' + search_text + '%',
            '%' + search_text + '%',
            '%' + search_text + '%',
            '%' + search_text + '%',
            '%' + search_text + '%'
        ))

        self.search_results = result.fetchall()

        for row_number, row_data in enumerate(result):

            self.name_ledit.setText(str(row_data[1]))
            self.profession_ledit.setText(str(row_data[2]))

            if str(row_data[3]) == "Masculin":
                self.man_rbtn.setChecked(True)
            if str(row_data[3]) == "Féminin":
                self.woman_rbtn.setChecked(True)

            self.age_spinBox.setValue(int(row_data[4]))
            self.commune_ledit.setText(str(row_data[5]))
            self.sector_spinBox.setValue(int(row_data[6]))
            self.phone_ledit.setText(str(row_data[7]))
            self.zone_comboBox.setCurrentText(str(row_data[8]))
            self.temp_ledit.setText(str(row_data[9]))
            self.tabd_ledit.setText(str(row_data[10]))
            self.tabg_ledit.setText(str(row_data[11]))
            self.bg_ledit.setText(str(row_data[12]))
            self.weight_ledit.setText(str(row_data[13]))
            self.diagnostic_textEdit.setPlainText(str(row_data[14]))
            self.treatments_textEdit.setPlainText(str(row_data[15]))
            self.observations_textEdit.setPlainText(str(row_data[16]))
            self.record_id = row_data[0]
            self.label_ID_Recup = row_data[0]
            self.label_ID_Recup_2 = row_data[0]

            self.erase_all_widgets()

    def erase_all_widgets(self):

        if self.search_results:
            row_data = self.search_results[0]
            # Boucle pour réinitialiser les widgets
            for widget in [self.name_ledit, self.profession_ledit, self.search_lineEdit, self.age_spinBox,
                           self.commune_ledit, self.sector_spinBox, self.phone_ledit, self.zone_comboBox,
                           self.temp_ledit, self.tabd_ledit, self.tabg_ledit, self.bg_ledit, self.weight_ledit,
                           self.diagnostic_textEdit, self.treatments_textEdit, self.observations_textEdit,
                           self.result_label, self.label_ID_Recup, self.label_ID_Recup_2, self.record_id,
                           self.record_id_2,
                           self.lbl_date_heure, self.search_lineEdit_2]:
                if isinstance(widget, QtWidgets.QLineEdit):
                    widget.clear()
                elif isinstance(widget, QtWidgets.QSpinBox):
                    widget.setValue(0)
                elif isinstance(widget, QtWidgets.QComboBox):
                    widget.setCurrentText("Choisir la distance du domicile en Km")
                elif isinstance(widget, QtWidgets.QTextEdit):
                    widget.clear()

            for label in [self.label_ID_Enr, self.label_ID_Recup, self.label_ID_Recup_2, self.label_date_heure_recup,
                          self.lbl_date_heure,
                          self.result_label]:
                label.setVisible(not label.isVisible())

    def search_data(self):
        self.db_connection()

        search_name = self.search_lineEdit_2.text()
        # self.record_id = QLabel(self)
        # self.record_id_2 = QLabel(self)
        # Initialisez self.cursor si ce n'est pas déjà fait
        if not hasattr(self, 'cursor') or self.cursor is None:
            self.cursor = self.db.cursor()

        # Exécutez la requête pour récupérer les données basées sur le nom
        query = "SELECT * FROM treatment_table WHERE NomPrenoms LIKE ?"
        result = self.cursor.execute(query, ('%' + search_name + '%',))
        data = result.fetchone()

        if data:
            self.dateTimeEdit_recup = ""
            # Si le nom est trouvé, remplissez les autres widgets avec les informations correspondantes
            self.label_ID_Recup.setStyleSheet(
                'background-color: rgb(0, 1, 146); border: 1px solid rgb(0, 1, 146); color: rgb(186, 209, 248); font: '
                '12pt "Century Gothic";padding-left: 5px;')
            # 'border: 1px solid #00ff00; font: 10pt "Century Gothic"; color: rgb(0, 85, 0); background-color: rgb('
            # '255, 250, 187);')
            self.label_ID_Recup_2.setStyleSheet(
                'background-color: rgb(0, 1, 146); border: 1px solid rgb(0, 1, 146); color: rgb(186, 209, 248); font: '
                '12pt "Century Gothic";padding-left: 5px;')
            self.lbl_date_heure.setStyleSheet(
                'font-size: 9pt "Century Gothic"; color: rgb(255, 0, 0); background-color: #ffded7; padding: 10px 5px; '
                'border-radius: 5px; font-style: italic;')
            self.result_label.setStyleSheet(
                'color: transparent; background-color: transparent;')

            self.result_label.setText(f"{data[1]}")

            if self.record_id is not None:
                self.record_id.setText(str(data[0]))

            if self.record_id_2 is not None:
                self.record_id_2.setText(str(data[0]))

            self.label_ID_Recup.setText(str(data[0]))
            self.label_ID_Recup_2.setText(str(data[0]))
            self.name_ledit.setText(str(data[1]))
            # print(self.name_ledit.setText(str(data[1])))
            self.profession_ledit.setText(str(data[2]))

            if str(data[3]) == "Masculin":
                self.man_rbtn.setChecked(True)
            if str(data[3]) == "Féminin":
                self.woman_rbtn.setChecked(True)

            self.age_spinBox.setValue(int(data[4]))
            self.commune_ledit.setText(str(data[5]))
            self.sector_spinBox.setValue(int(data[6]))
            self.phone_ledit.setText(str(data[7]))
            self.zone_comboBox.setCurrentText(str(data[8]))
            self.temp_ledit.setText(str(data[9]))
            self.tabd_ledit.setText(str(data[10]))
            self.tabg_ledit.setText(str(data[11]))
            self.bg_ledit.setText(str(data[12]))
            self.weight_ledit.setText(str(data[13]))
            self.diagnostic_textEdit.setPlainText(str(data[14]))
            self.treatments_textEdit.setPlainText(str(data[15]))
            self.observations_textEdit.setPlainText(str(data[16]))

            data_hour = f"{data[17]}"
            self.lbl_date_heure.setText(str(data_hour))

        else:
            # Si le nom n'est pas trouvé, affichez un message d'avertissement
            self.label_ID_Recup.setStyleSheet(
                'background - color: rgb(0, 1, 146); color: rgb(186, 209, 248); font: 75 16pt "Century Gothic"; '
                'padding - left: 5px;')
            # 'border: 1px solid #ff0000; font: 10pt "Century Gothic"; color: rgb(176, 0, 0); background-color: '
            # 'rgb(255, 228, 201);')
            self.label_ID_Recup_2.setStyleSheet(
                'background - color: rgb(0, 1, 146); color: rgb(186, 209, 248); font: 75 16pt "Century Gothic"; '
                'padding - left: 5px;')
            self.lbl_date_heure.setStyleSheet(
                'border: 1px solid #ff0000; font: 10pt "Century Gothic"; color: rgb(176, 0, 0); background-color: '
                'rgb(255, 228, 201);')
            self.result_label.setStyleSheet(
                'color: transparent; background-color: transparent;')

            self.result_label.setText(f"Nom non trouvé : {search_name}")

            # app = QApplication([])
            fenetre = QWidget()
            fenetre.setWindowTitle("Cabinet de Soins Médicaux LA CROIX GLORIEUSE")
            # fenetre()
            QMessageBox.warning(fenetre, "Nom non trouvé", f"Le nom '{search_name}' n'a pas été trouvé.")

    def reset_all_fields(self):
        # Réinitialisez tous les champs à leurs valeurs par défaut ou vides
        self.name_ledit.clear()
        self.profession_ledit.clear()
        self.woman_rbtn.setChecked(True)  # On réinitialise avec la valeur par défaut

        self.search_lineEdit_2.clear()

        self.age_spinBox.setValue(0)
        self.commune_ledit.clear()
        self.sector_spinBox.setValue(0)
        self.phone_ledit.clear()

        index = self.zone_comboBox.findText("Choisir la distance du domicile en Km")
        if index != -1:
            self.zone_comboBox.setCurrentIndex(index)

        # self.zone_comboBox.setCurrentIndex("Choisir la distance du domicile en Km")
        self.temp_ledit.setText("0")
        self.tabd_ledit.setText("0")
        self.tabg_ledit.setText("0")
        self.bg_ledit.setText("0")
        self.weight_ledit.setText("0")
        self.diagnostic_textEdit.clear()
        self.treatments_textEdit.clear()
        self.observations_textEdit.clear()
        # self.date_heure.clear()

        # Remettez le focus à search_lineEdit
        self.search_lineEdit.setFocus()
        self.search_lineEdit_2.setFocus()

        # Efface les labels si nécessaire
        self.label_ID_Recup.setText("0")
        self.label_ID_Recup_2.setText("0")
        # self.label_ID_Recup.clear()
        # self.label_ID_Recup_2.clear()
        self.lbl_date_heure.clear()
        self.lbl_date_heure.setStyleSheet(
            '''background-color: transparent;'''
        )
        self.attention_lbl.clear()
        self.attention_lbl.setStyleSheet(
            '''background-color: transparent;'''
        )
        self.attention_lbl_2.clear()
        self.attention_lbl_2.setStyleSheet(
            '''background-color: transparent;'''
        )

        # self.reset_all_fields()

    def resize_columns(self, column_widths):
        for col, width in enumerate(column_widths):
            self.restitute_tbl.setColumnWidth(col, width)

        self.restitute_tbl.setStyleSheet('''
            QTableWidget::item {
                background-color: rgb(222, 235, 247);
                color: black;
                border: 0.2px solid #00018f;
                padding: 1px;
            }
            align: left;
            color: #00018f; /*rgb(0,112,192);*/
            background-color: rgb(222, 235, 247);
        ''')

    def perform_update(self):
        # Exécuter la requête de mise à jour
        self.db_connection()

        # Récupérer les données modifiées depuis les widgets
        self.updated_name = self.name_ledit.text()
        self.updated_profession = self.profession_ledit.text()

        self.updated_sexe = "Féminin" if self.woman_rbtn.isChecked() else "Masculin"

        # Récupérer l'ID de l'enregistrement à mettre à jour
        self.record_id = int(self.label_ID_Recup.text())

        self.updated_age = str(self.age_spinBox.value())
        self.updated_commune = self.commune_ledit.text()
        self.updated_secteur = str(self.sector_spinBox.value())
        self.updated_phone = self.phone_ledit.text()
        self.updated_zone = self.zone_comboBox.currentText()
        self.updated_temp = self.temp_ledit.text()
        self.updated_tabd = self.tabd_ledit.text()
        self.updated_tabg = self.tabg_ledit.text()
        self.updated_bg = self.bg_ledit.text()
        self.updated_weight = self.weight_ledit.text()
        self.updated_diagnostic = self.diagnostic_textEdit.toPlainText()
        self.updated_treatements = self.treatments_textEdit.toPlainText()
        self.updated_observations = self.observations_textEdit.toPlainText()
        self.updated_date_heure = self.date_heure.text()

        print("Champs vérifiés :")
        for widget in [self.updated_name, self.updated_profession, self.updated_sexe, self.updated_age,
                       self.updated_commune, self.updated_secteur, self.updated_phone, self.updated_zone,
                       self.updated_temp, self.updated_tabd, self.updated_tabg, self.updated_bg, self.updated_weight,
                       self.updated_diagnostic, self.updated_treatements, self.updated_observations,
                       self.updated_date_heure]:
            print(f"{widget=}")

        # Vérifier si tous les champs requis sont remplis
        if all(value.strip() for value in
               [self.updated_name, self.updated_profession, self.updated_sexe, self.updated_age, self.updated_commune,
                self.updated_secteur, self.updated_phone, self.updated_zone, self.updated_temp, self.updated_tabd,
                self.updated_tabg, self.updated_bg, self.updated_weight, self.updated_diagnostic,
                self.updated_treatements, self.updated_observations, self.updated_date_heure]):
            # Tous les champs requis sont remplis, procéder à l'insertion
            row = (
                self.updated_name,
                self.updated_profession,
                self.updated_sexe,
                self.updated_age,
                self.updated_commune,
                self.updated_secteur,
                self.updated_phone,
                self.updated_zone,
                self.updated_temp,
                self.updated_tabd,
                self.updated_tabg,
                self.updated_bg,
                self.updated_weight,
                self.updated_diagnostic,
                self.updated_treatements,
                self.updated_observations,
                self.updated_date_heure,
                self.record_id
            )

            # Créer un tuple avec les données mises à jour
            update_query = '''UPDATE treatment_table SET NomPrenoms=?, Profession=?, Sexe=?, Age=?, Commune=?, 
            Secteur=?, Telephone=?, ZoneDeResidence=?, Tem=?, TABD=?, TABG=?, BG=?, Poids=?, Diagnostic=?, 
            Traitements=?, Observations=?, HeureDate=? WHERE ID=?'''

            self.res = self.cursor.execute(update_query, row)
            self.db.commit()

            # Afficher un message de succès ou faire d'autres actions nécessaires
            QMessageBox.information(self.dashboard_window, "Mise à jour réussie",
                                    "Les données ont été mises à jour avec succès.")

            # Réinitialisez tous les champs après l'insertion
            self.reset_all_fields()
        else:
            print("Valeurs des champs :")
            for widget in [self.updated_name, self.updated_profession, self.updated_sexe, self.updated_age,
                           self.updated_commune, self.updated_secteur, self.updated_phone, self.updated_zone,
                           self.updated_temp, self.updated_tabd, self.updated_tabg, self.updated_bg,
                           self.updated_weight, self.updated_diagnostic, self.updated_treatements,
                           self.updated_observations, self.updated_date_heure]:
                print(f"{widget}: {widget}")
            # Afficher un message d'erreur si des champs requis sont vides
            QMessageBox.warning(self, "Champs vides", "Veuillez remplir tous les champs requis.")

    def add_data(self):

        self.db_connection()
        self.create_widgets()

        name = self.name_ledit.text().strip()
        profession = self.profession_ledit.text().strip()

        sexe = "Masculin" if self.man_rbtn.isChecked() else "Féminin"

        # =======================================================================
        #        FIN DE LA PARTIE A REVOIR
        # =======================================================================

        age = str(self.age_spinBox.value())
        commune = self.commune_ledit.text().strip()
        secteur = str(self.sector_spinBox.value())
        phone = self.phone_ledit.text().strip()
        zone = self.zone_comboBox.currentText()
        temp = self.temp_ledit.text().strip()
        tabd = self.tabd_ledit.text().strip()
        tabg = self.tabg_ledit.text().strip()
        bg = self.bg_ledit.text().strip()
        weight = self.weight_ledit.text().strip()
        diagnostic = self.diagnostic_textEdit.toPlainText().strip()
        treatments = self.treatments_textEdit.toPlainText().strip()
        observations = self.observations_textEdit.toPlainText().strip()
        date_heure = self.date_heure.text().strip()

        for k in [name, profession, sexe, age, commune, secteur, phone, zone, temp, tabd, tabg, bg, weight,
                  diagnostic, treatments, observations, date_heure]: print(k)

        # Vérifier si tous les champs requis sont remplis et ne sont pas des valeurs par défaut
        if all(value and value not in ["0", "Choisir la distance du domicile en Km"] for value in
               [name, profession, sexe, age, commune, secteur, phone, zone, temp, tabd, tabg, bg, weight, diagnostic,
                treatments, observations, date_heure]):
            # Tous les champs requis sont remplis, procéder à l'insertion
            row = (name, profession, sexe, age, commune, secteur, phone, zone, temp, tabd, tabg, bg, weight, diagnostic,
                   treatments, observations, date_heure)
            command = '''INSERT INTO treatment_table (NomPrenoms, Profession, Sexe, Age, Commune, Secteur, Telephone, 
            ZoneDeResidence, Tem, TABD, TABG, BG, Poids, Diagnostic, Traitements, Observations, HeureDate) VALUES(?,?,
            ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)'''

            self.res = self.cursor.execute(command, row)
            self.db.commit()

            # Message de confirmation
            self.message_box()

            # Réinitialisez tous les champs après l'insertion
            self.reset_all_fields()

            # Bascule vers l'onglet d'index 0
            if self.tw_identity.currentIndex() != 0:
                self.tw_identity.setCurrentIndex(0)
                print(f"Index actif: {self.tw_identity.currentIndex()}")

        else:
            # Afficher un message d'erreur si validation échoue
            msg_box = QMessageBox(self)
            msg_box.setIcon(QMessageBox.Warning)
            msg_box.setWindowTitle("Champs invalides")
            msg_box.setText("Veuillez remplir tous les champs requis avec des valeurs différentes de ceux par défaut.")
            msg_box.setInformativeText("Informations supplémentaires ici...")
            msg_box.exec_()

    def create_widgets(self):
        # Champ Mot de pass
        self.mdp_lineEdit = QLineEdit()
        self.mdp_lineEdit.setEchoMode(QLineEdit.Password)

        # Créez vos boutons radio
        self.woman_rbtn = QRadioButton("Féminin")
        self.man_rbtn = QRadioButton("Masculin")

        # Créer les autres widgets
        self.name_ledit_ = self.name_ledit.text()
        self.profession_ledit_ = self.profession_ledit.text()

        self.sexe_ = ""
        self.woman_rbtn_ = self.woman_rbtn.text()
        self.man_rbtn_ = self.man_rbtn.text()

        if self.woman_rbtn.isChecked():
            self.sexe_ = "Féminin"
        elif self.man_rbtn.isChecked():
            self.sexe_ = "Masculin"

        self.age_spinBox_ = str(self.age_spinBox.value())
        self.commune_ledit_ = self.commune_ledit.text()
        self.sector_spinBox_ = str(self.sector_spinBox.value())
        self.phone_ledit_ = self.phone_ledit.text()
        self.zone_comboBox_ = self.zone_comboBox.currentText()
        self.temp_ledit_ = self.temp_ledit.text()
        self.tabd_ledit_ = self.tabd_ledit.text()
        self.tabg_ledit_ = self.tabg_ledit.text()
        self.bg_ledit_ = self.bg_ledit.text()
        self.weight_ledit_ = self.weight_ledit.text()
        self.diagnostic_textEdit_ = self.diagnostic_textEdit.toPlainText()
        self.treatments_textEdit_ = self.treatments_textEdit.toPlainText()
        self.observations_textEdit_ = self.observations_textEdit.toPlainText()
        self.date_heure_ = self.date_heure.text()

        self.search_lineEdit_2_ = self.search_lineEdit_2.text()
        self.search_btn_2 = QPushButton("Recherche")
        self.result_label = QLabel()

        self.lay_infos_recup = QHBoxLayout()
        self.lay_infos_recup.addWidget(self.label_ID_Enr)
        self.lay_infos_recup.addWidget(self.label_ID_Recup)
        self.lay_infos_recup.addWidget(self.label_date_heure_recup)
        self.lay_infos_recup.addWidget(self.lbl_date_heure)
        self.lay_infos_recup.addWidget(self.result_label)

        self.attention_lbl = QLabel()
        self.attention_lbl_2 = QLabel()
        self.tw_identity = QTabWidget()

    def delete_data(self):
        # Récupérer l'identifiant de l'enregistrement à supprimer
        identifiant = self.label_ID_Enr.text()

        fen = QWidget()
        fen.setWindowTitle("Cabinet de Soins Médicaux LA CROIX GLORIEUSE")
        confirm_dialog = QMessageBox.question(fen, 'Confirmation de suppression',
                                              'Voulez-vous vraiment supprimer cet enregistrement?',
                                              QMessageBox.Yes | QMessageBox.No)

        if confirm_dialog == QMessageBox.Yes:
            # Supprimer l'enregistrement de la base de données
            self.db_connection()

            command = ''' DELETE FROM treatment_table WHERE ID=? '''

            self.cursor.execute(command, (identifiant,))

            self.db.commit()

            fen = QWidget()
            fen.setWindowTitle("Cabinet de Soins Médicaux LA CROIX GLORIEUSE")
            QMessageBox.information(fen, "Suppression réussie", "L'enregistrement a bien été supprimé avec succès.")

            self.search_lineEdit_2.clear()

            # Réinitialiser les champs après la suppression
            self.erase_all_widgets()
            self.reset_all_fields()
        else:
            self.erase_all_widgets()
            self.reset_all_fields()

    def search_data_in_widgets(self):
        search_text = self.search_lineEdit_2.text().strip()

        # Vérifiez si le champ de recherche est vide
        if not search_text:
            self.clear_widgets()  # Méthode pour réinitialiser les widgets
            return

        # Requête SQL pour rechercher un enregistrement correspondant
        self.db_connection()
        query = """SELECT * FROM treatment_table 
                   WHERE NomPrenoms LIKE ? OR 
                         Profession LIKE ? OR 
                         Commune LIKE ? OR 
                         Secteur LIKE ? OR 
                         Telephone LIKE ?"""
        result = self.cursor.execute(query, (
            '%' + search_text + '%',
            '%' + search_text + '%',
            '%' + search_text + '%',
            '%' + search_text + '%',
            '%' + search_text + '%'
        )).fetchone()

        # Si un résultat est trouvé, remplissez les widgets
        if result:
            self.record_id = self.label_ID_Enr.setText(str(result[0]))
            self.record_id_2 = self.label_ID_Enr.setText(str(result[0]))
            self.label_ID_Recup.setText(str(result[0]))
            self.label_ID_Recup_2.setText(str(result[0]))

            self.name_ledit.setText(result[1])
            self.profession_ledit.setText(result[2])

            if result[3] == "Masculin":
                self.man_rbtn.setChecked(True)
            elif result[3] == "Féminin":
                self.woman_rbtn.setChecked(True)

            self.age_spinBox.setValue(int(result[4]))
            self.commune_ledit.setText(result[5])
            self.sector_spinBox.setValue(int(result[6]))
            self.phone_ledit.setText(str(result[7]))
            self.zone_comboBox.setCurrentText(result[8])

            self.temp_ledit.setText(str(result[9]))
            self.tabd_ledit.setText(str(result[10]))
            self.tabg_ledit.setText(str(result[11]))
            self.bg_ledit.setText(str(result[12]))
            self.weight_ledit.setText(str(result[13]))
            self.diagnostic_textEdit.setPlainText(str(result[14]))
            self.treatments_textEdit.setPlainText(str(result[15]))
            self.observations_textEdit.setPlainText(str(result[16]))

            data_hour = f"{result[17]}"
            # print(data_hour)
            # print(f"Valeur de data[17]: {data[17]}")
            self.lbl_date_heure.setText(f"{data_hour}")
        else:
            # Si aucun résultat, réinitialisez les widgets
            self.clear_widgets()

    def clear_widgets(self):
        """Réinitialise tous les widgets liés aux données"""
        self.label_ID_Recup.clear()
        self.label_ID_Recup_2.clear()
        self.name_ledit.clear()
        self.profession_ledit.clear()
        self.man_rbtn.setChecked(False)
        self.woman_rbtn.setChecked(False)
        self.age_spinBox.setValue(0)
        self.commune_ledit.clear()
        self.sector_spinBox.setValue(0)
        self.phone_ledit.clear()
        self.zone_comboBox.setCurrentIndex(0)  # Si "Choisir une option" est l'index 0

    def message_box(self):
        fenetre = QWidget()
        fenetre.setWindowTitle("Cabinet de Soins Médicaux LA CROIX GLORIEUSE")

        # Vérifiez si self.res existe et est valide avant d'appeler rowcount
        if self.res and self.cursor.rowcount > 0:
            QMessageBox.information(fenetre, f"Opération réussie", f"Opération effectuée avec succes.")
            # self.db.commit()
        else:
            QMessageBox.warning(fenetre, "Échec de l'opération", "Réessayez après quelques minutes !")

    # ========================================================

    #         DEBUT BOUTON DE NAVIGATION
    # ========================================================

    def config_navigation(self):
        self.db_connection()

        command = ''' SELECT ID FROM treatment_table '''
        self.result = self.cursor.execute(command)
        self.val = self.result.fetchall()

    def meth_next_row(self):
        self.config_navigation()
        self.tot = len(self.val)
        global precedent
        global suivant

        precedent = precedent + 1
        if precedent < self.tot:
            suivant = self.val[precedent][0]
            self.navigate()
            self.update_attention_label()
        else:
            precedent = self.tot - 1

    def meth_previous_row(self):
        self.config_navigation()
        global precedent
        global suivant
        precedent = precedent - 1
        if precedent > -1:
            suivant = self.val[precedent][0]
            self.navigate()
            self.update_attention_label()
        else:
            precedent = 0

    def meth_last_row(self):
        self.config_navigation()
        self.tot = len(self.val)
        global precedent
        global suivant

        precedent = self.tot - 1
        if precedent < self.tot:
            suivant = self.val[precedent][0]
            self.navigate()
            self.update_attention_label()
        else:
            precedent = self.tot - 1

    def meth_first_row(self):
        self.config_navigation()

        global precedent
        global suivant
        precedent = 0

        if precedent > -1:
            suivant = self.val[precedent][0]
            self.navigate()
            self.update_attention_label()
        else:
            precedent = 0

    def update_attention_label(self):
        # Mettez à jour le label en fonction de la position actuelle
        if precedent == 0:
            self.attention_lbl.setText("Premier élément de la table atteint")
            self.attention_lbl_2.setText("Premier élément de la table atteint")
            self.attention_lbl.setStyleSheet(
                'font-size: 9pt "Century Gothic"; color: rgb(255, 0, 0); background-color: #ffded7; padding: 10px 5px; '
                'border-radius: 5px; font-style: italic;')
            self.attention_lbl_2.setStyleSheet(
                'font-size: 9pt "Century Gothic"; color: rgb(255, 0, 0); background-color: #ffded7; padding: 10px 5px; '
                'border-radius: 5px; font-style: italic;')
            # print("Premier élément de la table atteint")

        elif precedent == self.tot - 1:
            self.attention_lbl.setText("Dernier élément de la table atteint")
            self.attention_lbl_2.setText("Dernier élément de la table atteint")
            self.attention_lbl.setStyleSheet(
                'font-size: 9pt "Century Gothic"; color: rgb(255, 0, 0); background-color: #ffded7; padding: 10px 5px; '
                'border-radius: 5px; font-style: italic;')
            self.attention_lbl_2.setStyleSheet(
                'font-size: 9pt "Century Gothic"; color: rgb(255, 0, 0); background-color: #ffded7; padding: 10px 5px; '
                'border-radius: 5px; font-style: italic;')
            # print("Dernier élément de la table atteint")
        else:
            self.attention_lbl.clear()
            self.attention_lbl.setStyleSheet('background-color: transparent;')
            self.attention_lbl_2.clear()
            self.attention_lbl_2.setStyleSheet('background-color: transparent;')

    # ========================================================
    #         FIN BOUTON DE NAVIGATION
    # ========================================================

    def navigate(self):
        global suivant
        self.db_connection()

        command = ''' SELECT * FROM treatment_table WHERE ID=? '''

        self.result = self.cursor.execute(command, [suivant])
        val = self.result.fetchone()
        # print(val) # Juste pour le débogage
        self.label_ID_Recup.setText(str(val[0]))
        self.label_ID_Recup_2.setText(str(val[0]))
        self.name_ledit.setText(str(val[1]))
        self.profession_ledit.setText(str(val[2]))

        if str(val[3]) == "Masculin":
            self.man_rbtn.setChecked(True)
        elif str(val[3]) == "Féminin":
            self.woman_rbtn.setChecked(True)

        self.age_spinBox.setValue(int(val[4]))
        self.commune_ledit.setText(str(val[5]))
        self.sector_spinBox.setValue(int(val[6]))
        self.phone_ledit.setText(str(val[7]))
        self.zone_comboBox.setCurrentText(str(val[8]))
        self.temp_ledit.setText(str(val[9]))
        self.tabd_ledit.setText(str(val[10]))
        self.tabg_ledit.setText(str(val[11]))
        self.bg_ledit.setText(str(val[12]))
        self.weight_ledit.setText(str(val[13]))
        self.diagnostic_textEdit.setPlainText(str(val[14]))
        self.treatments_textEdit.setPlainText(str(val[15]))
        self.observations_textEdit.setPlainText(str(val[16]))

        val_hour = f"{val[17]}"
        # print(val_hour) # Juste pour le débogage

        self.lbl_date_heure.setText(f"Date et heure de la dernière consultation : {val_hour}")
        self.lbl_date_heure.setStyleSheet(
            'font-size: 9pt "Century Gothic"; color: rgb(255, 0, 0); background-color: #ffded7; padding: 10px 5px; '
            'border-radius: 5px; font-style: italic;')

    def populate_table(self, result):
        self.restitute_tbl.setRowCount(len(result))
        self.num_columns = len(result[0]) if result else 0

        for row, data in enumerate(result):
            for col in range(self.num_columns):
                self.restitute_tbl.setItem(row, col, QTableWidgetItem(str(data[col])))

    def show_popup(self, data):
        popup_dialog = QDialog()
        popup_dialog.setWindowTitle("Détails de la ligne")  # Ajouter une icône à la fenêtre
        popup_dialog.setWindowIcon(
            QIcon("img/cg_icon_pt.png"))  # Remplacez "icon.png" par le chemin de votre fichier icône

        popup_dialog.resize(250, 125)

        # Ajoutez une table à la disposition du popup
        table_popup = QTableWidget()
        table_popup.setColumnCount(2)
        table_popup.setRowCount(len(data))

        # Aligner les noms de colonnes à gauche
        header = table_popup.horizontalHeader()
        header.setStyleSheet('font-weight: bold;')

        for col in range(table_popup.columnCount()):
            header.setSectionResizeMode(col, QHeaderView.ResizeToContents)

        # Aligner les noms des en-têtes à gauche
        header = table_popup.horizontalHeader()
        header.setStyleSheet('font-weight: bold; alignment')

        for col in range(table_popup.columnCount()):
            header.setSectionResizeMode(col, QHeaderView.Stretch)

        # Définir les noms et la largeur des colonnes
        table_popup.setHorizontalHeaderLabels(["REFERENCES", "VALEURS"])

        # Définir la taille fixe du popup
        popup_dialog.setFixedSize(500, 475)

        table_popup.setColumnCount(2)
        table_popup.setRowCount(len(data))

        # Aligner les noms des en-têtes à gauche
        header = table_popup.horizontalHeader()
        header.setSectionResizeMode(QHeaderView.Fixed)
        header.setSectionResizeMode(0, QHeaderView.Fixed)
        header.setSectionResizeMode(1, QHeaderView.Fixed)
        table_popup.setColumnWidth(0, 125)  # 1ère colonne avec une largeur de 100px
        table_popup.setColumnWidth(1, 325)  # 2è colonne avec une largeur de 350px

        # Couleurs d'arrière-plan alternées
        color1 = QColor("#E6E6E6")  # Couleur 1
        color2 = QColor("#FFFFFF")  # Couleur 2

        def apply_alternate_colors():
            for row in range(table_popup.rowCount()):
                for col in range(table_popup.columnCount()):
                    item = table_popup.item(row, col)
                    if item:
                        item.setBackground(color1 if row % 2 == 0 else color2)

        # Parcourez les données et remplissez la table
        for row, (label, value) in enumerate(
                zip(['ID:', 'Nom Prenoms:', 'Profession:', 'Sexe:', 'Age', 'Commune', 'Secteur', 'Telephone',
                     'Zone De Residence', 'Température', 'TABD', 'TABG', 'BG', 'Poids', 'Diagnostic', 'Traitements',
                     'Observations', 'DateHeure'], data)):
            item_label = QTableWidgetItem(f"{label}")
            item_value = QTableWidgetItem(f"{value}")

            # Alternez les couleurs d'arrière-plan
            if row % 2 == 0:
                item_label.setBackground(color1)
                item_value.setBackground(color1)
            else:
                item_label.setBackground(color2)
                item_value.setBackground(color2)

            table_popup.setItem(row, 0, item_label)
            table_popup.setItem(row, 1, item_value)

            # Ajustez automatiquement la hauteur de la ligne en fonction du contenu
            table_popup.resizeRowToContents(row)

        # Ajoutez une bordure de couleur à la table
        table_popup.setStyleSheet("QTableWidget{border: 1px solid #CCCCCC;}")

        # Ajustez la largeur des colonnes en fonction des valeurs de la liste
        column_widths = [50, 200]
        self.resize_columns(column_widths)

        layout = QVBoxLayout()
        layout.addWidget(table_popup)

        apply_alternate_colors()

        # Ajouter les boutons de navigation et de fermeture
        prev_button = QPushButton("←")
        next_button = QPushButton("→")
        close_button = QPushButton("Fermer")
        close_button.clicked.connect(popup_dialog.close)

        # Ajouter la logique de navigation
        def navigate(direction):
            current_row = self.restitute_tbl.currentRow()
            if direction == "prev" and current_row > 0:
                self.restitute_tbl.selectRow(current_row - 1)
            elif direction == "next" and current_row < self.restitute_tbl.rowCount() - 1:
                self.restitute_tbl.selectRow(current_row + 1)

            # Mettez à jour les données affichées dans le popup
            new_data = [
                self.restitute_tbl.item(self.restitute_tbl.currentRow(), col).text()
                if self.restitute_tbl.item(self.restitute_tbl.currentRow(), col) else ""
                for col in range(self.restitute_tbl.columnCount())
            ]
            for row, value in enumerate(new_data):
                table_popup.setItem(row, 1, QTableWidgetItem(value))

            apply_alternate_colors()

        prev_button.clicked.connect(lambda: navigate("prev"))
        next_button.clicked.connect(lambda: navigate("next"))
        close_button.clicked.connect(popup_dialog.close)

        # Créer une disposition horizontale pour les flèches et le bouton de fermeture
        nav_layout = QHBoxLayout()
        nav_layout.addWidget(prev_button)
        nav_layout.addStretch()
        nav_layout.addWidget(close_button)
        nav_layout.addStretch()
        nav_layout.addWidget(next_button)

        # Créer la disposition
        layout = QVBoxLayout()
        layout.addWidget(table_popup)
        layout.addLayout(nav_layout)

        popup_dialog.setLayout(layout)
        popup_dialog.exec_()


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    dashboard_window = QtWidgets.QMainWindow()
    ui = Ui_dashboard_window()
    ui.setupUi(dashboard_window)
    dashboard_window.show()
    sys.exit(app.exec_())
